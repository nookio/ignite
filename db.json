{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.JPG","path":"favicon.JPG","modified":0,"renderable":0},{"_id":"source/images/TProtocol.jpg","path":"images/TProtocol.jpg","modified":0,"renderable":0},{"_id":"source/images/TServerTransport.jpg","path":"images/TServerTransport.jpg","modified":0,"renderable":0},{"_id":"source/uploads/thrift例子.zip","path":"uploads/thrift例子.zip","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"source/images/TTransport.jpg","path":"images/TTransport.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/流程图.jpeg","path":"images/流程图.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"fdbc42d30213c59cf981a1a6fda27b618ef7d67f","modified":1517330382936},{"_id":"source/favicon.JPG","hash":"b99f3d35d5f1acbce67fe983cffc7a8874ee362f","modified":1502379576000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1502379576000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1502379576000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1502379576000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1502379576000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1502379576000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1502379576000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1502379576000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1502379576000},{"_id":"themes/next/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1502379576000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1502379576000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1502379576000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1502379576000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1502379576000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1502379576000},{"_id":"themes/next/_config.yml","hash":"2e86d78d2ad4e713cf9b4ec4014cccf3f95da087","modified":1502379576000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1502379576000},{"_id":"source/_drafts/Socket-NIO.md","hash":"164548673b7d1791bc87d662a56c9a4efda2139d","modified":1502987121000},{"_id":"source/_drafts/Socket.md","hash":"5be65b4a652d9a2ce9ffe52a63f6a7cd9b89145d","modified":1502987121000},{"_id":"source/_drafts/Thrift源码分析-FrameBuffer.md","hash":"5afe3a581301a54db5f9a809c7a0bd9faab3d175","modified":1502987121000},{"_id":"source/_drafts/Thrift源码分析-IDL和Client.md","hash":"60c4b8d99b45bb105611024aab660efd67d4799e","modified":1502987121000},{"_id":"source/_drafts/Thrift源码分析-TServer.md","hash":"c1334e7ca484cac5ef5113247aecc6f6b6f5547e","modified":1502987121000},{"_id":"source/_posts/Thrift源码分析-Protocol.md","hash":"47770a2d10302176e2c13b1234245bc2cf418601","modified":1517232863557},{"_id":"source/_posts/Thrift源码分析-Transport.md","hash":"2de9bfa590aa8f2b56a7428cd590ad5268ca71b2","modified":1517330509499},{"_id":"source/_posts/Thrift源码分析-原生调用例子.md","hash":"3b3fd0d8363e1872b07f4045efb88d86d49b6be3","modified":1517239378448},{"_id":"source/_posts/Thrift源码分析-概述.md","hash":"09d996af4cc3c086c5a1c7cd6ecf3bf27ba42924","modified":1517232863558},{"_id":"source/_posts/Thrift源码分析-请求流程图.md","hash":"75ec53facc6656480a572bc5acaea8cebaf2fdf0","modified":1517331222977},{"_id":"source/_drafts/Thrift源码分析-扩展方案.md","hash":"2f4c34da121d777c8e9632db4e63a8aad339f018","modified":1502987121000},{"_id":"source/_drafts/Thrift源码分析-方法调用链.md","hash":"cbb4df0101b6ef1fb0a309e21dce385b665c8519","modified":1502987121000},{"_id":"source/_posts/ClassLoader分析.md","hash":"1e03c7c5346800874bea0ab63241900fb544d9a8","modified":1502987121000},{"_id":"source/_posts/first-page.md","hash":"8977e07ac13d8f613fbd06fa5aecbf30b330e64f","modified":1502379576000},{"_id":"source/about/.DS_Store","hash":"8208a60b8feacf7ffb9395ac09bc39029f5b3898","modified":1502379576000},{"_id":"source/about/index.md","hash":"0df738d41a067dd90aa6db1ecd9935ad7445e1d8","modified":1502379576000},{"_id":"source/categories/index.md","hash":"b913f7aa65568b022e86eef524b5df68f4fc2178","modified":1502379576000},{"_id":"source/categories/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1502379576000},{"_id":"source/images/TProtocol.jpg","hash":"f19b925f0d278ee6fc8e18ae020f9cb0006e32cb","modified":1517232863558},{"_id":"source/images/TServerTransport.jpg","hash":"cfaaeb14e6dca426e7280ccb773fdfd7693090df","modified":1502987121000},{"_id":"source/tags/.DS_Store","hash":"8208a60b8feacf7ffb9395ac09bc39029f5b3898","modified":1502379576000},{"_id":"source/tags/index.md","hash":"01ac83291f755a5d22ae45bca7fe9c16d9511f3d","modified":1502379576000},{"_id":"source/uploads/.DS_Store","hash":"02838721998309e26c76ded6db2911902bd584e1","modified":1502987121000},{"_id":"source/uploads/thrift例子.zip","hash":"32bd674562c5273d9d30761e72cbe236077271d8","modified":1517234385807},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1502379576000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1502379576000},{"_id":"themes/next/languages/en.yml","hash":"754b8a91a2ef9a526d1a79a048007ee26ef85dcf","modified":1502379576000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1502379576000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1502379576000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1502379576000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1502379576000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1502379576000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1502379576000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1502379576000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c904d9d1beb44f56a69356f2c19a66a5a40d2107","modified":1502379576000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9649494bc8e043bf01b31389faa05141034a4a59","modified":1502379576000},{"_id":"themes/next/languages/zh-tw.yml","hash":"92630f4a51ecae2053e23c04de1af328b4d96ff7","modified":1502379576000},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1502379576000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1502379576000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1502379576000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1502379576000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1502379576000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1502379576000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1502379576000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1502379576000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1502379576000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1502379576000},{"_id":"themes/next/source/404.html","hash":"1716c9b0bcfc80387503532c9c7132813ef72d93","modified":1502379576000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1502379576000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1502379576000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1502379576000},{"_id":"source/images/TTransport.jpg","hash":"204c3798b6db1847a369fa11f6365fb8164916be","modified":1502987121000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502379576000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502379576000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1502379576000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1502379576000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1502379576000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1502379576000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1502379576000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1502379576000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"728311d8f25223c9981519ad9d4b299815e8d736","modified":1502379576000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1502379576000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"edd17337b6589b435dade6933aacfd29ee53c0dc","modified":1502379576000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1502379576000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1502379576000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1502379576000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1502379576000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1502379576000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1502379576000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1502379576000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1502379576000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1502379576000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1502379576000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1502379576000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1502379576000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1502379576000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1502379576000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1502379576000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1502379576000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1502379576000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1502379576000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1502379576000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1502379576000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1502379576000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1502379576000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1502379576000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1502379576000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1502379576000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1502379576000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502379576000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502379576000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502379576000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502379576000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502379576000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502379576000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502379576000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502379576000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502379576000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502379576000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502379576000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502379576000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502379576000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502379576000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1502379576000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1502379576000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1502379576000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1502379576000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1502379576000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1502379576000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1502379576000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1502379576000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1502379576000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1502379576000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502379576000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1502379576000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"f7ff5b08043aa4db9e9f09969e84b14abae6a790","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0b124d91d8635aff2a91b6651aca1ce0fd0eed96","modified":1502379576000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1502379576000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1502379576000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1502379576000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1502379576000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1502379576000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1502379576000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1502379576000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1502379576000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1502379576000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1502379576000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1502379576000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502379576000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502379576000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502379576000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502379576000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502379576000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502379576000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502379576000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502379576000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502379576000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502379576000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502379576000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502379576000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502379576000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502379576000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502379576000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502379576000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502379576000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502379576000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1502379576000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502379576000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502379576000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1502379576000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1502379576000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1502379576000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1502379576000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1502379576000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1502379576000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502379576000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502379576000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502379576000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502379576000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502379576000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502379576000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502379576000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1502379576000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"3b979ea05046ff18cfe3a6b0f73b57942f9142e3","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1502379576000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"8c95022619c7de50f78c60027047692972f3565a","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502379576000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502379576000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502379576000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502379576000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1502379576000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502379576000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502379576000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1502379576000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502379576000},{"_id":"source/images/流程图.jpeg","hash":"d71af77dd36878b3e8679f66741b3282e714ea1b","modified":1517330317993},{"_id":"public/search.xml","hash":"5eb4d083dadee2954b21eb2213af43b2e17741a4","modified":1517331291107},{"_id":"public/about/index.html","hash":"ab1eeb52e9d760ac33b9fb76d7200558d174bde0","modified":1517330671068},{"_id":"public/categories/index.html","hash":"dd6948be4bde6fbbeba54ed1e4d495aebdd3fe95","modified":1517330671069},{"_id":"public/tags/index.html","hash":"17250655eac56c62f38907f924365c62ee6fef81","modified":1517330671070},{"_id":"public/2017/08/25/Thrift源码分析-Protocol/index.html","hash":"db3ccbbf41c764f566863dad1251736b4adbef20","modified":1517330671070},{"_id":"public/2017/08/15/Thrift源码分析-原生调用例子/index.html","hash":"1e39795f0520a14c618509028245df4268d39a18","modified":1517330671070},{"_id":"public/2017/08/14/Thrift源码分析-概述/index.html","hash":"ce0a91cb667c3f93c6cdbb20c1dd756e87beaac7","modified":1517330671070},{"_id":"public/2017/08/13/ClassLoader分析/index.html","hash":"54847902c628ee599bddc8dac90745a3780e0477","modified":1517330671070},{"_id":"public/2017/08/10/first-page/index.html","hash":"227cad533e60a4898a33a7c58d8a220e9056e726","modified":1517330671070},{"_id":"public/archives/index.html","hash":"e10ac15bbaacf3c5611a6d3d3742d78f2815d4de","modified":1517330671070},{"_id":"public/archives/2017/index.html","hash":"38efeab2fa5ed876f4cd3456999960e0dd0185fa","modified":1517330671070},{"_id":"public/archives/2017/08/index.html","hash":"93de2d178751fa8b7997cff10a066b49b05b4ec3","modified":1517330671070},{"_id":"public/index.html","hash":"5fd15cacef49382297eeae1caa32955f6dcd0235","modified":1517330671070},{"_id":"public/tags/RPC/index.html","hash":"4832f7e77545f208432af3f757cf74ab5e8ebcf9","modified":1517330671070},{"_id":"public/tags/原理/index.html","hash":"4cff8298ded908a18c20b25e64a1a81724007ae7","modified":1517330671070},{"_id":"public/tags/源码/index.html","hash":"05e359524497c11cfd6207c3592ad465ccab36cd","modified":1517330671070},{"_id":"public/tags/Thrift/index.html","hash":"e059da95c3d2df086bc92c7b5a2f07c1a1ab39ab","modified":1517330671071},{"_id":"public/tags/Java/index.html","hash":"8850ebaf8f703f8b2bf953d5e3d22ce6ec40ba4f","modified":1517330671071},{"_id":"public/tags/哈哈/index.html","hash":"7a13a0335897c9965f0dade664ccdcfff48d92a7","modified":1517330671071},{"_id":"public/tags/测试/index.html","hash":"f92e787044ff3039b5cf5bd0cf6c14ba6517eadc","modified":1517330671071},{"_id":"public/2017/08/27/Thrift源码分析-Transport/index.html","hash":"ea303f796688ce3506b57762d304b3ea5991691b","modified":1517330671088},{"_id":"public/2017/08/20/Thrift源码分析-请求流程图/index.html","hash":"5d6d2735cf9f22e4675d5d7e810c926a212dbec8","modified":1517331291122},{"_id":"public/favicon.JPG","hash":"b99f3d35d5f1acbce67fe983cffc7a8874ee362f","modified":1517330671097},{"_id":"public/images/TProtocol.jpg","hash":"f19b925f0d278ee6fc8e18ae020f9cb0006e32cb","modified":1517330671097},{"_id":"public/images/TServerTransport.jpg","hash":"cfaaeb14e6dca426e7280ccb773fdfd7693090df","modified":1517330671097},{"_id":"public/uploads/thrift例子.zip","hash":"32bd674562c5273d9d30761e72cbe236077271d8","modified":1517330671097},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1517330671097},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1517330671097},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1517330671097},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1517330671097},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1517330671097},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1517330671097},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1517330671097},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1517330671097},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517330671097},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1517330671097},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1517330671097},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1517330671097},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1517330671097},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1517330671097},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1517330671097},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1517330671097},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1517330671098},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1517330671098},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517330671098},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517330671098},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517330671098},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517330671098},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517330671098},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517330671098},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517330671098},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1517330671098},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1517330671099},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1517330671099},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1517330671099},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1517330671099},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1517330671099},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1517330671099},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1517330671099},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1517330671099},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1517330671099},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1517330671099},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1517330671099},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517330671099},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1517330671099},{"_id":"public/images/TTransport.jpg","hash":"204c3798b6db1847a369fa11f6365fb8164916be","modified":1517330671776},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1517330671778},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1517330671794},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1517330671794},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1517330671794},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1517330671794},{"_id":"public/404.html","hash":"1716c9b0bcfc80387503532c9c7132813ef72d93","modified":1517330671800},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1517330671800},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1517330671800},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1517330671800},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1517330671801},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1517330671801},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1517330671801},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1517330671801},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1517330671801},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1517330671801},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1517330671801},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1517330671801},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1517330671801},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1517330671801},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1517330671801},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1517330671801},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1517330671801},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1517330671801},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1517330671801},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1517330671801},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1517330671801},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1517330671801},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1517330671801},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1517330671801},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1517330671801},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1517330671802},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1517330671802},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1517330671802},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1517330671802},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517330671802},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1517330671802},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1517330671802},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1517330671802},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1517330671802},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1517330671802},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1517330671802},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1517330671802},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1517330671802},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1517330671802},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1517330671802},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1517330671802},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1517330671802},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1517330671802},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517330671802},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517330671803},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1517330671803},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1517330671803},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1517330671803},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1517330671803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517330671803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1517330671803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1517330671803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517330671803},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1517330671804},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1517330671804},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1517330671804},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1517330671804},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1517330671804},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1517330671804},{"_id":"public/css/main.css","hash":"ec4da2c98845624584c4d6c9fb8eac95afc4c8a3","modified":1517330671804},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1517330671804},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1517330671804},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1517330671804},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517330671804},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517330671804},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1517330671804},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1517330671804},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517330671804},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1517330671804},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1517330671804},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1517330671805},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1517330671805},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1517330671805},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1517330671805},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1517330671805},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1517330671805},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1517330671805},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1517330671805},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1517330671805},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1517330671805},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1517330671805},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1517330671805},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1517330671805},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517330671805},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1517330671805},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1517330671805},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1517330671805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1517330671806},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1517330671806},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1517330671806},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1517330671806},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1517330671817},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1517330671823},{"_id":"public/images/流程图.jpeg","hash":"d71af77dd36878b3e8679f66741b3282e714ea1b","modified":1517330671835}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2016-06-06T05:52:40.000Z","_content":"一只正在奔向工程师的程序员。\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-06-06 13:52:40\n---\n一只正在奔向工程师的程序员。\n","updated":"2017-08-10T15:39:36.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjd1vi5g60001iifyl09hxdee","content":"<p>一只正在奔向工程师的程序员。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一只正在奔向工程师的程序员。</p>\n"},{"title":"categories","date":"2016-06-06T05:36:30.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-06 13:36:30\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-08-10T15:39:36.000Z","path":"categories/index.html","layout":"page","_id":"cjd1vi5g90003iifypbargz5c","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-06-06T05:35:42.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-06 13:35:42\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-08-10T15:39:36.000Z","path":"tags/index.html","layout":"page","_id":"cjd1vi5m2001piifytp82jn38","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Socket-NIO","_content":"","source":"_drafts/Socket-NIO.md","raw":"---\ntitle: Socket-NIO\ntags:\n---\n","slug":"Socket-NIO","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5g10000iifyxgpzuh97","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Socket","_content":"","source":"_drafts/Socket.md","raw":"---\ntitle: Socket\ntags:\n---\n","slug":"Socket","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5g70002iify4ujezucf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Thrift源码分析--FrameBuffer","_content":"","source":"_drafts/Thrift源码分析-FrameBuffer.md","raw":"---\ntitle: Thrift源码分析--FrameBuffer\ntags:\n---\n","slug":"Thrift源码分析-FrameBuffer","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5ga0004iify48hokelr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Thrift源码分析--IDL和Client","_content":"","source":"_drafts/Thrift源码分析-IDL和Client.md","raw":"---\ntitle: Thrift源码分析--IDL和Client\ntags:\n---\n","slug":"Thrift源码分析-IDL和Client","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gc0005iifyb4qhnoxh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Thrift源码分析--TServer","_content":"","source":"_drafts/Thrift源码分析-TServer.md","raw":"---\ntitle: Thrift源码分析--TServer\ntags:\n---\n","slug":"Thrift源码分析-TServer","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5ge0006iifymla1ccai","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Thrift源码分析--Protocol","date":"2017-08-25T07:45:45.000Z","_content":"\n## 简介    \n\n在介绍完IO流以后，基本上就知道了服务端和客户端是如何建立链接以及进行数据传输的，但是对于如何进行数据的序列化和反序列化，将在本文进行详 细记介绍。  \n协议层的抽象类方法叫做：TProtocol,在包org.apache.thrift.protocol下。其中定义了协议的所有方法  \n\n<!--more-->  \n\n##### TProtocol的UML图：  \n![TProtocol](/images/TProtocol.jpg \"TProtocol结构\")  \n分别定义了简版json协议、json传输协议、二进制传输协议、密集型（对int和long进行了长度压缩，采用了zigzag 编码）详情我会在后面继续介绍。  \n\n子类是我司封装的方法和官方的简版传输协议（对消息体进行了深度压缩）  \n\n*先介绍下协议层需要完成的内容，定义了一个序列化和反序列化的协议:*  \n\n```java\n/**\n * Transport\n */\nprotected TTransport trans_;\n\n/**\n * Writing methods.\n */\n\npublic abstract void writeMessageBegin(TMessage message) throws TException;\n\npublic abstract void writeMessageEnd() throws TException;\n\npublic abstract void writeStructBegin(TStruct struct) throws TException;\n\npublic abstract void writeStructEnd() throws TException;\n\npublic abstract void writeFieldBegin(TField field) throws TException;\n\npublic abstract void writeFieldEnd() throws TException;\n\npublic abstract void writeFieldStop() throws TException;\n\npublic abstract void writeMapBegin(TMap map) throws TException;\n\npublic abstract void writeMapEnd() throws TException;\n\npublic abstract void writeListBegin(TList list) throws TException;\n\npublic abstract void writeListEnd() throws TException;\n\npublic abstract void writeSetBegin(TSet set) throws TException;\n\npublic abstract void writeSetEnd() throws TException;\n\npublic abstract void writeBool(boolean b) throws TException;\n\npublic abstract void writeByte(byte b) throws TException;\n\npublic abstract void writeI16(short i16) throws TException;\n\npublic abstract void writeI32(int i32) throws TException;\n\npublic abstract void writeI64(long i64) throws TException;\n\npublic abstract void writeDouble(double dub) throws TException;\n\npublic abstract void writeString(String str) throws TException;\n\npublic abstract void writeBinary(ByteBuffer buf) throws TException;\n\n/**\n * Reading methods.\n */\n\npublic abstract TMessage readMessageBegin() throws TException;\n\npublic abstract void readMessageEnd() throws TException;\n\npublic abstract TStruct readStructBegin() throws TException;\n\npublic abstract void readStructEnd() throws TException;\n\npublic abstract TField readFieldBegin() throws TException;\n\npublic abstract void readFieldEnd() throws TException;\n\npublic abstract TMap readMapBegin() throws TException;\n\npublic abstract void readMapEnd() throws TException;\n\npublic abstract TList readListBegin() throws TException;\n\npublic abstract void readListEnd() throws TException;\n\npublic abstract TSet readSetBegin() throws TException;\n\npublic abstract void readSetEnd() throws TException;\n\npublic abstract boolean readBool() throws TException;\n\npublic abstract byte readByte() throws TException;\n\npublic abstract short readI16() throws TException;\n\npublic abstract int readI32() throws TException;\n\npublic abstract long readI64() throws TException;\n\npublic abstract double readDouble() throws TException;\n\npublic abstract String readString() throws TException;\n\npublic abstract ByteBuffer readBinary() throws TException;\n\n/**\n * Scheme accessor 用于选择标准传输协议还是简版协议\n */\npublic Class<? extends IScheme> getScheme() {\n  return StandardScheme.class;\n}\n```\n\n___需要注意的是在write方法里面，并没有wirte i32、bool、long、i16、double等并没有writeEnd方法，因为这些都是定长的___\n\n在这个协议里面定义了一个请求是如何被请求端打包，并且被服务端解包的。\n\n在这个协议中有一个类叫做TMessage。可以简单来看一下源码：  \n```java\npublic final class TMessage {\n  public TMessage() {\n    this(\"\", TType.STOP, 0);\n  }\n\n  public TMessage(String n, byte t, int s) {\n    name = n;\n    type = t;\n    seqid = s;\n  }\n\n//方法名字\n  public final String name;\n//类型，使用的是 org.apache.thrift.protocol.TMessageType中的枚举，目前使用的都是其中的CALL\n  public final byte type;\n//目前都是0\n  public final int seqid;\n\n  @Override\n  public String toString() {\n    return \"<TMessage name:'\" + name + \"' type: \" + type + \" seqid:\" + seqid + \">\";\n  }\n\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof TMessage) {\n      return equals((TMessage) other);\n    }\n    return false;\n  }\n\n  public boolean equals(TMessage other) {\n    return name.equals(other.name) && type == other.type && seqid == other.seqid;\n  }\n}\n```\n\n下面来详细解释下协议层的使用。  \n首先来看其中定义的方法。  \nTTransport:这个是传输层，Thrift传输层---I/O操作  \n剩下的就是一个如何来构造一次传输的内容。  \n先看分类，整体上分为两个大类别，每一个方法都有写和读的方法在对应着。先来说说写方法。  \n##### __A__  \n首先是定义了一个方法调用的开始writeMessageBegin，这个方法中写入TMessage这个对象，其中包含了调用的方法名字，调用类型（目前看到的都是CALL），以及当前消息的序列（可能与传输层有关）。  \n\n##### __B__\n根据函数中定义的参数顺序，依次调用相应的写方法和写结束方法（只有不可知长度的类型才需要结束方法）。写入字段的消息类型和消息长度，以及消息顺序号。  \n\n*__比如如何写入string这个类型__*  \n\n```java\npublic void writeString(String str) throws TException {\n  try {\n    byte[] dat = str.getBytes(\"UTF-8\");\n\t//写入数组长度是i32，也就是说超长会出问题－ －\n    writeI32(dat.length);\n\t//在传输层里面写入相应长度的数据\n    trans_.write(dat, 0, dat.length);\n  } catch (UnsupportedEncodingException uex) {\n    throw new TException(\"JVM DOES NOT SUPPORT UTF-8\");\n  }\n}\n```\n\n*__再比如如何写入map这个类型__*  \n在写入之前用到的一些类型：  \n```java\n//首先是定义了TMap这个对象\npublic final class TMap {\n  public TMap() {\n    this(TType.STOP, TType.STOP, 0);\n  }\n\n  public TMap(byte k, byte v, int s) {\n    keyType = k;\n    valueType = v;\n    size = s;\n  }\n//key类型\n  public final byte  keyType;\n//value类型\n  public final byte  valueType;\n  public final int   size;\n}\n```\n\n其中引用了一个新的对象教TType。  \n```java\n//其中对key和value的定义是在 org.apache.thrift.protocol.TType\npublic final class TType {\n  public static final byte STOP   = 0;\n  public static final byte VOID   = 1;\n  public static final byte BOOL   = 2;\n  public static final byte BYTE   = 3;\n  public static final byte DOUBLE = 4;\n  public static final byte I16    = 6;\n  public static final byte I32    = 8;\n  public static final byte I64    = 10;\n  public static final byte STRING = 11;\n  public static final byte STRUCT = 12;\n  public static final byte MAP    = 13;\n  public static final byte SET    = 14;\n  public static final byte LIST   = 15;\n  public static final byte ENUM   = 16;\n}\n```\n\n下面是正式的写入map这个对象,一共有两种写入方法，分别为标准写入和Tuple写入（简版）？  \n\n__下面对比两种的写入的不同点:__   \n\n*标准写入*\n```java\nif (struct.testMap != null) {\n  if (struct.isSetTestMap()) {\n\t//这个参数是指TField其中表名了参数类型，名字，和id\n    oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);\n    {\n      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.testMap.size()));\n      for (Map.Entry<String, Integer> _iter4 : struct.testMap.entrySet())\n      {\n        oprot.writeString(_iter4.getKey());\n        oprot.writeI32(_iter4.getValue());\n      }\n      oprot.writeMapEnd();\n    }\n    oprot.writeFieldEnd();\n  }\n}\n```\n\n下面是其中的一段field的代码\n```java\npublic class TField {\n  public TField() {\n    this(\"\", TType.STOP, (short)0);\n  }\n\n  public TField(String n, byte t, short i) {\n    name = n;\n    type = t;\n    id = i;\n  }\n\n//字段名字\n  public final String name;\n//字段类型详情在下面\n  public final byte   type;\n//id，会增长\n  public final short  id;\n\n  public String toString() {\n    return \"<TField name:'\" + name + \"' type:\" + type + \" field-id:\" + id + \">\";\n  }\n\n  public boolean equals(TField otherField) {\n    return type == otherField.type && id == otherField.id;\n  }\n}\n```\n\n*简单版本*\n```java\nif (struct.isSetTestMap()) {\n  {\n    oprot.writeI32(struct.testMap.size());\n    for (Map.Entry<String, Integer> _iter5 : struct.testMap.entrySet())\n    {\n      oprot.writeString(_iter5.getKey());\n      oprot.writeI32(_iter5.getValue());\n    }\n  }\n}\n```\n\n\n可见简版的写入相对于标准更节省空间。因此传输效率更高。我司采用的是标准传输协议。\n在读取的时候采用的是对应的方法  \n*标准协议：*\n```java\n\ncase 4: // TEST_MAP\n  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {\n    {\n      org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();\n      struct.testMap = new HashMap<String,Integer>(2*_map0.size);\n      for (int _i1 = 0; _i1 < _map0.size; ++_i1)\n      {\n        String _key2; // required\n        int _val3; // required\n        _key2 = iprot.readString();\n        _val3 = iprot.readI32();\n        struct.testMap.put(_key2, _val3);\n      }\n      iprot.readMapEnd();\n    }\n    struct.setTestMapIsSet(true);\n  } else {\n    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n  }\n  break;\n```\n\n*简单版本*\n```java\nif (incoming.get(1)) { //incoming标示了有哪些optional被赋值\n  {\n    org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());\n    struct.testMap = new HashMap<String,Integer>(2*_map6.size);\n    for (int _i7 = 0; _i7 < _map6.size; ++_i7)\n    {\n      String _key8; // required\n      int _val9; // required\n      _key8 = iprot.readString();\n      _val9 = iprot.readI32();\n      struct.testMap.put(_key8, _val9);\n    }\n  }\n  struct.setTestMapIsSet(true);\n}\n```\n\n##### __C__\n然后writeMessageEnd，完成了消息的写入  \n\n\n整体上来说，如果想要对代码进行缩减或者是更改，需要注意的地方很多，比如读写的顺序。而且在不断的发版过程中的变量顺序调整也会影响数据的序列化和反序列化。\n因此借用官方的一句话：\n```java\n/**\n * Autogenerated by Thrift Compiler (0.8.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\n ```\n","source":"_posts/Thrift源码分析-Protocol.md","raw":"---\ntitle: Thrift源码分析--Protocol\ndate: 2017-08-25 15:45:45\ntags:\n  - RPC\n  - 原理\n  - 源码\n  - Thrift\n---\n\n## 简介    \n\n在介绍完IO流以后，基本上就知道了服务端和客户端是如何建立链接以及进行数据传输的，但是对于如何进行数据的序列化和反序列化，将在本文进行详 细记介绍。  \n协议层的抽象类方法叫做：TProtocol,在包org.apache.thrift.protocol下。其中定义了协议的所有方法  \n\n<!--more-->  \n\n##### TProtocol的UML图：  \n![TProtocol](/images/TProtocol.jpg \"TProtocol结构\")  \n分别定义了简版json协议、json传输协议、二进制传输协议、密集型（对int和long进行了长度压缩，采用了zigzag 编码）详情我会在后面继续介绍。  \n\n子类是我司封装的方法和官方的简版传输协议（对消息体进行了深度压缩）  \n\n*先介绍下协议层需要完成的内容，定义了一个序列化和反序列化的协议:*  \n\n```java\n/**\n * Transport\n */\nprotected TTransport trans_;\n\n/**\n * Writing methods.\n */\n\npublic abstract void writeMessageBegin(TMessage message) throws TException;\n\npublic abstract void writeMessageEnd() throws TException;\n\npublic abstract void writeStructBegin(TStruct struct) throws TException;\n\npublic abstract void writeStructEnd() throws TException;\n\npublic abstract void writeFieldBegin(TField field) throws TException;\n\npublic abstract void writeFieldEnd() throws TException;\n\npublic abstract void writeFieldStop() throws TException;\n\npublic abstract void writeMapBegin(TMap map) throws TException;\n\npublic abstract void writeMapEnd() throws TException;\n\npublic abstract void writeListBegin(TList list) throws TException;\n\npublic abstract void writeListEnd() throws TException;\n\npublic abstract void writeSetBegin(TSet set) throws TException;\n\npublic abstract void writeSetEnd() throws TException;\n\npublic abstract void writeBool(boolean b) throws TException;\n\npublic abstract void writeByte(byte b) throws TException;\n\npublic abstract void writeI16(short i16) throws TException;\n\npublic abstract void writeI32(int i32) throws TException;\n\npublic abstract void writeI64(long i64) throws TException;\n\npublic abstract void writeDouble(double dub) throws TException;\n\npublic abstract void writeString(String str) throws TException;\n\npublic abstract void writeBinary(ByteBuffer buf) throws TException;\n\n/**\n * Reading methods.\n */\n\npublic abstract TMessage readMessageBegin() throws TException;\n\npublic abstract void readMessageEnd() throws TException;\n\npublic abstract TStruct readStructBegin() throws TException;\n\npublic abstract void readStructEnd() throws TException;\n\npublic abstract TField readFieldBegin() throws TException;\n\npublic abstract void readFieldEnd() throws TException;\n\npublic abstract TMap readMapBegin() throws TException;\n\npublic abstract void readMapEnd() throws TException;\n\npublic abstract TList readListBegin() throws TException;\n\npublic abstract void readListEnd() throws TException;\n\npublic abstract TSet readSetBegin() throws TException;\n\npublic abstract void readSetEnd() throws TException;\n\npublic abstract boolean readBool() throws TException;\n\npublic abstract byte readByte() throws TException;\n\npublic abstract short readI16() throws TException;\n\npublic abstract int readI32() throws TException;\n\npublic abstract long readI64() throws TException;\n\npublic abstract double readDouble() throws TException;\n\npublic abstract String readString() throws TException;\n\npublic abstract ByteBuffer readBinary() throws TException;\n\n/**\n * Scheme accessor 用于选择标准传输协议还是简版协议\n */\npublic Class<? extends IScheme> getScheme() {\n  return StandardScheme.class;\n}\n```\n\n___需要注意的是在write方法里面，并没有wirte i32、bool、long、i16、double等并没有writeEnd方法，因为这些都是定长的___\n\n在这个协议里面定义了一个请求是如何被请求端打包，并且被服务端解包的。\n\n在这个协议中有一个类叫做TMessage。可以简单来看一下源码：  \n```java\npublic final class TMessage {\n  public TMessage() {\n    this(\"\", TType.STOP, 0);\n  }\n\n  public TMessage(String n, byte t, int s) {\n    name = n;\n    type = t;\n    seqid = s;\n  }\n\n//方法名字\n  public final String name;\n//类型，使用的是 org.apache.thrift.protocol.TMessageType中的枚举，目前使用的都是其中的CALL\n  public final byte type;\n//目前都是0\n  public final int seqid;\n\n  @Override\n  public String toString() {\n    return \"<TMessage name:'\" + name + \"' type: \" + type + \" seqid:\" + seqid + \">\";\n  }\n\n  @Override\n  public boolean equals(Object other) {\n    if (other instanceof TMessage) {\n      return equals((TMessage) other);\n    }\n    return false;\n  }\n\n  public boolean equals(TMessage other) {\n    return name.equals(other.name) && type == other.type && seqid == other.seqid;\n  }\n}\n```\n\n下面来详细解释下协议层的使用。  \n首先来看其中定义的方法。  \nTTransport:这个是传输层，Thrift传输层---I/O操作  \n剩下的就是一个如何来构造一次传输的内容。  \n先看分类，整体上分为两个大类别，每一个方法都有写和读的方法在对应着。先来说说写方法。  \n##### __A__  \n首先是定义了一个方法调用的开始writeMessageBegin，这个方法中写入TMessage这个对象，其中包含了调用的方法名字，调用类型（目前看到的都是CALL），以及当前消息的序列（可能与传输层有关）。  \n\n##### __B__\n根据函数中定义的参数顺序，依次调用相应的写方法和写结束方法（只有不可知长度的类型才需要结束方法）。写入字段的消息类型和消息长度，以及消息顺序号。  \n\n*__比如如何写入string这个类型__*  \n\n```java\npublic void writeString(String str) throws TException {\n  try {\n    byte[] dat = str.getBytes(\"UTF-8\");\n\t//写入数组长度是i32，也就是说超长会出问题－ －\n    writeI32(dat.length);\n\t//在传输层里面写入相应长度的数据\n    trans_.write(dat, 0, dat.length);\n  } catch (UnsupportedEncodingException uex) {\n    throw new TException(\"JVM DOES NOT SUPPORT UTF-8\");\n  }\n}\n```\n\n*__再比如如何写入map这个类型__*  \n在写入之前用到的一些类型：  \n```java\n//首先是定义了TMap这个对象\npublic final class TMap {\n  public TMap() {\n    this(TType.STOP, TType.STOP, 0);\n  }\n\n  public TMap(byte k, byte v, int s) {\n    keyType = k;\n    valueType = v;\n    size = s;\n  }\n//key类型\n  public final byte  keyType;\n//value类型\n  public final byte  valueType;\n  public final int   size;\n}\n```\n\n其中引用了一个新的对象教TType。  \n```java\n//其中对key和value的定义是在 org.apache.thrift.protocol.TType\npublic final class TType {\n  public static final byte STOP   = 0;\n  public static final byte VOID   = 1;\n  public static final byte BOOL   = 2;\n  public static final byte BYTE   = 3;\n  public static final byte DOUBLE = 4;\n  public static final byte I16    = 6;\n  public static final byte I32    = 8;\n  public static final byte I64    = 10;\n  public static final byte STRING = 11;\n  public static final byte STRUCT = 12;\n  public static final byte MAP    = 13;\n  public static final byte SET    = 14;\n  public static final byte LIST   = 15;\n  public static final byte ENUM   = 16;\n}\n```\n\n下面是正式的写入map这个对象,一共有两种写入方法，分别为标准写入和Tuple写入（简版）？  \n\n__下面对比两种的写入的不同点:__   \n\n*标准写入*\n```java\nif (struct.testMap != null) {\n  if (struct.isSetTestMap()) {\n\t//这个参数是指TField其中表名了参数类型，名字，和id\n    oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);\n    {\n      oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.testMap.size()));\n      for (Map.Entry<String, Integer> _iter4 : struct.testMap.entrySet())\n      {\n        oprot.writeString(_iter4.getKey());\n        oprot.writeI32(_iter4.getValue());\n      }\n      oprot.writeMapEnd();\n    }\n    oprot.writeFieldEnd();\n  }\n}\n```\n\n下面是其中的一段field的代码\n```java\npublic class TField {\n  public TField() {\n    this(\"\", TType.STOP, (short)0);\n  }\n\n  public TField(String n, byte t, short i) {\n    name = n;\n    type = t;\n    id = i;\n  }\n\n//字段名字\n  public final String name;\n//字段类型详情在下面\n  public final byte   type;\n//id，会增长\n  public final short  id;\n\n  public String toString() {\n    return \"<TField name:'\" + name + \"' type:\" + type + \" field-id:\" + id + \">\";\n  }\n\n  public boolean equals(TField otherField) {\n    return type == otherField.type && id == otherField.id;\n  }\n}\n```\n\n*简单版本*\n```java\nif (struct.isSetTestMap()) {\n  {\n    oprot.writeI32(struct.testMap.size());\n    for (Map.Entry<String, Integer> _iter5 : struct.testMap.entrySet())\n    {\n      oprot.writeString(_iter5.getKey());\n      oprot.writeI32(_iter5.getValue());\n    }\n  }\n}\n```\n\n\n可见简版的写入相对于标准更节省空间。因此传输效率更高。我司采用的是标准传输协议。\n在读取的时候采用的是对应的方法  \n*标准协议：*\n```java\n\ncase 4: // TEST_MAP\n  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {\n    {\n      org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();\n      struct.testMap = new HashMap<String,Integer>(2*_map0.size);\n      for (int _i1 = 0; _i1 < _map0.size; ++_i1)\n      {\n        String _key2; // required\n        int _val3; // required\n        _key2 = iprot.readString();\n        _val3 = iprot.readI32();\n        struct.testMap.put(_key2, _val3);\n      }\n      iprot.readMapEnd();\n    }\n    struct.setTestMapIsSet(true);\n  } else {\n    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n  }\n  break;\n```\n\n*简单版本*\n```java\nif (incoming.get(1)) { //incoming标示了有哪些optional被赋值\n  {\n    org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());\n    struct.testMap = new HashMap<String,Integer>(2*_map6.size);\n    for (int _i7 = 0; _i7 < _map6.size; ++_i7)\n    {\n      String _key8; // required\n      int _val9; // required\n      _key8 = iprot.readString();\n      _val9 = iprot.readI32();\n      struct.testMap.put(_key8, _val9);\n    }\n  }\n  struct.setTestMapIsSet(true);\n}\n```\n\n##### __C__\n然后writeMessageEnd，完成了消息的写入  \n\n\n整体上来说，如果想要对代码进行缩减或者是更改，需要注意的地方很多，比如读写的顺序。而且在不断的发版过程中的变量顺序调整也会影响数据的序列化和反序列化。\n因此借用官方的一句话：\n```java\n/**\n * Autogenerated by Thrift Compiler (0.8.0)\n *\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n *  @generated\n */\n ```\n","slug":"Thrift源码分析-Protocol","published":1,"updated":"2018-01-29T13:34:23.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gg0007iify5mmt73c6","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在介绍完IO流以后，基本上就知道了服务端和客户端是如何建立链接以及进行数据传输的，但是对于如何进行数据的序列化和反序列化，将在本文进行详 细记介绍。<br>协议层的抽象类方法叫做：TProtocol,在包org.apache.thrift.protocol下。其中定义了协议的所有方法  </p>\n<a id=\"more\"></a>  \n<h5 id=\"TProtocol的UML图：\"><a href=\"#TProtocol的UML图：\" class=\"headerlink\" title=\"TProtocol的UML图：\"></a>TProtocol的UML图：</h5><p><img src=\"/images/TProtocol.jpg\" alt=\"TProtocol\" title=\"TProtocol结构\"><br>分别定义了简版json协议、json传输协议、二进制传输协议、密集型（对int和long进行了长度压缩，采用了zigzag 编码）详情我会在后面继续介绍。  </p>\n<p>子类是我司封装的方法和官方的简版传输协议（对消息体进行了深度压缩）  </p>\n<p><em>先介绍下协议层需要完成的内容，定义了一个序列化和反序列化的协议:</em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Transport</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">protected</span> TTransport trans_;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Writing methods.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMessageBegin</span><span class=\"params\">(TMessage message)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMessageEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStructBegin</span><span class=\"params\">(TStruct struct)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStructEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldBegin</span><span class=\"params\">(TField field)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldStop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMapBegin</span><span class=\"params\">(TMap map)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMapEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeListBegin</span><span class=\"params\">(TList list)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeListEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeSetBegin</span><span class=\"params\">(TSet set)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeSetEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBool</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByte</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI16</span><span class=\"params\">(<span class=\"keyword\">short</span> i16)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI32</span><span class=\"params\">(<span class=\"keyword\">int</span> i32)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI64</span><span class=\"params\">(<span class=\"keyword\">long</span> i64)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> dub)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeString</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBinary</span><span class=\"params\">(ByteBuffer buf)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Reading methods.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TMessage <span class=\"title\">readMessageBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readMessageEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TStruct <span class=\"title\">readStructBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readStructEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TField <span class=\"title\">readFieldBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readFieldEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TMap <span class=\"title\">readMapBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readMapEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TList <span class=\"title\">readListBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readListEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TSet <span class=\"title\">readSetBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readSetEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readBool</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">byte</span> <span class=\"title\">readByte</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">short</span> <span class=\"title\">readI16</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">readI32</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">long</span> <span class=\"title\">readI64</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">readDouble</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">readString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ByteBuffer <span class=\"title\">readBinary</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Scheme accessor 用于选择标准传输协议还是简版协议</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;? extends IScheme&gt; getScheme() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> StandardScheme.class;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>需要注意的是在write方法里面，并没有wirte i32、bool、long、i16、double等并没有writeEnd方法，因为这些都是定长的</em></strong></p>\n<p>在这个协议里面定义了一个请求是如何被请求端打包，并且被服务端解包的。</p>\n<p>在这个协议中有一个类叫做TMessage。可以简单来看一下源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TMessage</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"\"</span>, TType.STOP, <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMessage</span><span class=\"params\">(String n, <span class=\"keyword\">byte</span> t, <span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    name = n;</div><div class=\"line\">    type = t;</div><div class=\"line\">    seqid = s;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法名字</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\"><span class=\"comment\">//类型，使用的是 org.apache.thrift.protocol.TMessageType中的枚举，目前使用的都是其中的CALL</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> type;</div><div class=\"line\"><span class=\"comment\">//目前都是0</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> seqid;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;TMessage name:'\"</span> + name + <span class=\"string\">\"' type: \"</span> + type + <span class=\"string\">\" seqid:\"</span> + seqid + <span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> TMessage) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> equals((TMessage) other);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(TMessage other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name.equals(other.name) &amp;&amp; type == other.type &amp;&amp; seqid == other.seqid;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面来详细解释下协议层的使用。<br>首先来看其中定义的方法。<br>TTransport:这个是传输层，Thrift传输层—I/O操作<br>剩下的就是一个如何来构造一次传输的内容。<br>先看分类，整体上分为两个大类别，每一个方法都有写和读的方法在对应着。先来说说写方法。  </p>\n<h5 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a><strong>A</strong></h5><p>首先是定义了一个方法调用的开始writeMessageBegin，这个方法中写入TMessage这个对象，其中包含了调用的方法名字，调用类型（目前看到的都是CALL），以及当前消息的序列（可能与传输层有关）。  </p>\n<h5 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a><strong>B</strong></h5><p>根据函数中定义的参数顺序，依次调用相应的写方法和写结束方法（只有不可知长度的类型才需要结束方法）。写入字段的消息类型和消息长度，以及消息顺序号。  </p>\n<p><em><strong>比如如何写入string这个类型</strong></em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeString</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> TException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] dat = str.getBytes(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t<span class=\"comment\">//写入数组长度是i32，也就是说超长会出问题－ －</span></div><div class=\"line\">    writeI32(dat.length);</div><div class=\"line\">\t<span class=\"comment\">//在传输层里面写入相应长度的数据</span></div><div class=\"line\">    trans_.write(dat, <span class=\"number\">0</span>, dat.length);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException uex) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TException(<span class=\"string\">\"JVM DOES NOT SUPPORT UTF-8\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em><strong>再比如如何写入map这个类型</strong></em><br>在写入之前用到的一些类型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先是定义了TMap这个对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TMap</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(TType.STOP, TType.STOP, <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMap</span><span class=\"params\">(<span class=\"keyword\">byte</span> k, <span class=\"keyword\">byte</span> v, <span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    keyType = k;</div><div class=\"line\">    valueType = v;</div><div class=\"line\">    size = s;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">//key类型</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>  keyType;</div><div class=\"line\"><span class=\"comment\">//value类型</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>  valueType;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>   size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中引用了一个新的对象教TType。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//其中对key和value的定义是在 org.apache.thrift.protocol.TType</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TType</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STOP   = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> VOID   = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BOOL   = <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE   = <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> DOUBLE = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I16    = <span class=\"number\">6</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I32    = <span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I64    = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STRING = <span class=\"number\">11</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STRUCT = <span class=\"number\">12</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAP    = <span class=\"number\">13</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> SET    = <span class=\"number\">14</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> LIST   = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> ENUM   = <span class=\"number\">16</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是正式的写入map这个对象,一共有两种写入方法，分别为标准写入和Tuple写入（简版）？  </p>\n<p><strong>下面对比两种的写入的不同点:</strong>   </p>\n<p><em>标准写入</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (struct.testMap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (struct.isSetTestMap()) &#123;</div><div class=\"line\">\t<span class=\"comment\">//这个参数是指TField其中表名了参数类型，名字，和id</span></div><div class=\"line\">    oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);</div><div class=\"line\">    &#123;</div><div class=\"line\">      oprot.writeMapBegin(<span class=\"keyword\">new</span> org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.testMap.size()));</div><div class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; _iter4 : struct.testMap.entrySet())</div><div class=\"line\">      &#123;</div><div class=\"line\">        oprot.writeString(_iter4.getKey());</div><div class=\"line\">        oprot.writeI32(_iter4.getValue());</div><div class=\"line\">      &#125;</div><div class=\"line\">      oprot.writeMapEnd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    oprot.writeFieldEnd();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是其中的一段field的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TField</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TField</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"\"</span>, TType.STOP, (<span class=\"keyword\">short</span>)<span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TField</span><span class=\"params\">(String n, <span class=\"keyword\">byte</span> t, <span class=\"keyword\">short</span> i)</span> </span>&#123;</div><div class=\"line\">    name = n;</div><div class=\"line\">    type = t;</div><div class=\"line\">    id = i;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//字段名字</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\"><span class=\"comment\">//字段类型详情在下面</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>   type;</div><div class=\"line\"><span class=\"comment\">//id，会增长</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span>  id;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;TField name:'\"</span> + name + <span class=\"string\">\"' type:\"</span> + type + <span class=\"string\">\" field-id:\"</span> + id + <span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(TField otherField)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> type == otherField.type &amp;&amp; id == otherField.id;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>简单版本</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (struct.isSetTestMap()) &#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    oprot.writeI32(struct.testMap.size());</div><div class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; _iter5 : struct.testMap.entrySet())</div><div class=\"line\">    &#123;</div><div class=\"line\">      oprot.writeString(_iter5.getKey());</div><div class=\"line\">      oprot.writeI32(_iter5.getValue());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可见简版的写入相对于标准更节省空间。因此传输效率更高。我司采用的是标准传输协议。<br>在读取的时候采用的是对应的方法<br><em>标准协议：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// TEST_MAP</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (schemeField.type == org.apache.thrift.protocol.TType.MAP) &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();</div><div class=\"line\">      struct.testMap = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;(<span class=\"number\">2</span>*_map0.size);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> _i1 = <span class=\"number\">0</span>; _i1 &lt; _map0.size; ++_i1)</div><div class=\"line\">      &#123;</div><div class=\"line\">        String _key2; <span class=\"comment\">// required</span></div><div class=\"line\">        <span class=\"keyword\">int</span> _val3; <span class=\"comment\">// required</span></div><div class=\"line\">        _key2 = iprot.readString();</div><div class=\"line\">        _val3 = iprot.readI32();</div><div class=\"line\">        struct.testMap.put(_key2, _val3);</div><div class=\"line\">      &#125;</div><div class=\"line\">      iprot.readMapEnd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    struct.setTestMapIsSet(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure></p>\n<p><em>简单版本</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (incoming.get(<span class=\"number\">1</span>)) &#123; <span class=\"comment\">//incoming标示了有哪些optional被赋值</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    org.apache.thrift.protocol.TMap _map6 = <span class=\"keyword\">new</span> org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());</div><div class=\"line\">    struct.testMap = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;(<span class=\"number\">2</span>*_map6.size);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> _i7 = <span class=\"number\">0</span>; _i7 &lt; _map6.size; ++_i7)</div><div class=\"line\">    &#123;</div><div class=\"line\">      String _key8; <span class=\"comment\">// required</span></div><div class=\"line\">      <span class=\"keyword\">int</span> _val9; <span class=\"comment\">// required</span></div><div class=\"line\">      _key8 = iprot.readString();</div><div class=\"line\">      _val9 = iprot.readI32();</div><div class=\"line\">      struct.testMap.put(_key8, _val9);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  struct.setTestMapIsSet(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a><strong>C</strong></h5><p>然后writeMessageEnd，完成了消息的写入  </p>\n<p>整体上来说，如果想要对代码进行缩减或者是更改，需要注意的地方很多，比如读写的顺序。而且在不断的发版过程中的变量顺序调整也会影响数据的序列化和反序列化。<br>因此借用官方的一句话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Autogenerated by Thrift Compiler (0.8.0)</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING</span></div><div class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@generated</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在介绍完IO流以后，基本上就知道了服务端和客户端是如何建立链接以及进行数据传输的，但是对于如何进行数据的序列化和反序列化，将在本文进行详 细记介绍。<br>协议层的抽象类方法叫做：TProtocol,在包org.apache.thrift.protocol下。其中定义了协议的所有方法  </p>","more":"<h5 id=\"TProtocol的UML图：\"><a href=\"#TProtocol的UML图：\" class=\"headerlink\" title=\"TProtocol的UML图：\"></a>TProtocol的UML图：</h5><p><img src=\"/images/TProtocol.jpg\" alt=\"TProtocol\" title=\"TProtocol结构\"><br>分别定义了简版json协议、json传输协议、二进制传输协议、密集型（对int和long进行了长度压缩，采用了zigzag 编码）详情我会在后面继续介绍。  </p>\n<p>子类是我司封装的方法和官方的简版传输协议（对消息体进行了深度压缩）  </p>\n<p><em>先介绍下协议层需要完成的内容，定义了一个序列化和反序列化的协议:</em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Transport</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">protected</span> TTransport trans_;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Writing methods.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMessageBegin</span><span class=\"params\">(TMessage message)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMessageEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStructBegin</span><span class=\"params\">(TStruct struct)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStructEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldBegin</span><span class=\"params\">(TField field)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldStop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMapBegin</span><span class=\"params\">(TMap map)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeMapEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeListBegin</span><span class=\"params\">(TList list)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeListEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeSetBegin</span><span class=\"params\">(TSet set)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeSetEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBool</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByte</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI16</span><span class=\"params\">(<span class=\"keyword\">short</span> i16)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI32</span><span class=\"params\">(<span class=\"keyword\">int</span> i32)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeI64</span><span class=\"params\">(<span class=\"keyword\">long</span> i64)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> dub)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeString</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">writeBinary</span><span class=\"params\">(ByteBuffer buf)</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Reading methods.</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TMessage <span class=\"title\">readMessageBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readMessageEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TStruct <span class=\"title\">readStructBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readStructEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TField <span class=\"title\">readFieldBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readFieldEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TMap <span class=\"title\">readMapBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readMapEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TList <span class=\"title\">readListBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readListEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> TSet <span class=\"title\">readSetBegin</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">readSetEnd</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">readBool</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">byte</span> <span class=\"title\">readByte</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">short</span> <span class=\"title\">readI16</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">readI32</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">long</span> <span class=\"title\">readI64</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">readDouble</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">readString</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> ByteBuffer <span class=\"title\">readBinary</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TException</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Scheme accessor 用于选择标准传输协议还是简版协议</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> Class&lt;? extends IScheme&gt; getScheme() &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> StandardScheme.class;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong><em>需要注意的是在write方法里面，并没有wirte i32、bool、long、i16、double等并没有writeEnd方法，因为这些都是定长的</em></strong></p>\n<p>在这个协议里面定义了一个请求是如何被请求端打包，并且被服务端解包的。</p>\n<p>在这个协议中有一个类叫做TMessage。可以简单来看一下源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TMessage</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"\"</span>, TType.STOP, <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMessage</span><span class=\"params\">(String n, <span class=\"keyword\">byte</span> t, <span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    name = n;</div><div class=\"line\">    type = t;</div><div class=\"line\">    seqid = s;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//方法名字</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\"><span class=\"comment\">//类型，使用的是 org.apache.thrift.protocol.TMessageType中的枚举，目前使用的都是其中的CALL</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> type;</div><div class=\"line\"><span class=\"comment\">//目前都是0</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> seqid;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;TMessage name:'\"</span> + name + <span class=\"string\">\"' type: \"</span> + type + <span class=\"string\">\" seqid:\"</span> + seqid + <span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (other <span class=\"keyword\">instanceof</span> TMessage) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> equals((TMessage) other);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(TMessage other)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name.equals(other.name) &amp;&amp; type == other.type &amp;&amp; seqid == other.seqid;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面来详细解释下协议层的使用。<br>首先来看其中定义的方法。<br>TTransport:这个是传输层，Thrift传输层—I/O操作<br>剩下的就是一个如何来构造一次传输的内容。<br>先看分类，整体上分为两个大类别，每一个方法都有写和读的方法在对应着。先来说说写方法。  </p>\n<h5 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a><strong>A</strong></h5><p>首先是定义了一个方法调用的开始writeMessageBegin，这个方法中写入TMessage这个对象，其中包含了调用的方法名字，调用类型（目前看到的都是CALL），以及当前消息的序列（可能与传输层有关）。  </p>\n<h5 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a><strong>B</strong></h5><p>根据函数中定义的参数顺序，依次调用相应的写方法和写结束方法（只有不可知长度的类型才需要结束方法）。写入字段的消息类型和消息长度，以及消息顺序号。  </p>\n<p><em><strong>比如如何写入string这个类型</strong></em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeString</span><span class=\"params\">(String str)</span> <span class=\"keyword\">throws</span> TException </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">byte</span>[] dat = str.getBytes(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t<span class=\"comment\">//写入数组长度是i32，也就是说超长会出问题－ －</span></div><div class=\"line\">    writeI32(dat.length);</div><div class=\"line\">\t<span class=\"comment\">//在传输层里面写入相应长度的数据</span></div><div class=\"line\">    trans_.write(dat, <span class=\"number\">0</span>, dat.length);</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException uex) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TException(<span class=\"string\">\"JVM DOES NOT SUPPORT UTF-8\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em><strong>再比如如何写入map这个类型</strong></em><br>在写入之前用到的一些类型：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//首先是定义了TMap这个对象</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TMap</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMap</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(TType.STOP, TType.STOP, <span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TMap</span><span class=\"params\">(<span class=\"keyword\">byte</span> k, <span class=\"keyword\">byte</span> v, <span class=\"keyword\">int</span> s)</span> </span>&#123;</div><div class=\"line\">    keyType = k;</div><div class=\"line\">    valueType = v;</div><div class=\"line\">    size = s;</div><div class=\"line\">  &#125;</div><div class=\"line\"><span class=\"comment\">//key类型</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>  keyType;</div><div class=\"line\"><span class=\"comment\">//value类型</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>  valueType;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>   size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其中引用了一个新的对象教TType。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//其中对key和value的定义是在 org.apache.thrift.protocol.TType</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TType</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STOP   = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> VOID   = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BOOL   = <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> BYTE   = <span class=\"number\">3</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> DOUBLE = <span class=\"number\">4</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I16    = <span class=\"number\">6</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I32    = <span class=\"number\">8</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> I64    = <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STRING = <span class=\"number\">11</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> STRUCT = <span class=\"number\">12</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> MAP    = <span class=\"number\">13</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> SET    = <span class=\"number\">14</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> LIST   = <span class=\"number\">15</span>;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span> ENUM   = <span class=\"number\">16</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是正式的写入map这个对象,一共有两种写入方法，分别为标准写入和Tuple写入（简版）？  </p>\n<p><strong>下面对比两种的写入的不同点:</strong>   </p>\n<p><em>标准写入</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (struct.testMap != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (struct.isSetTestMap()) &#123;</div><div class=\"line\">\t<span class=\"comment\">//这个参数是指TField其中表名了参数类型，名字，和id</span></div><div class=\"line\">    oprot.writeFieldBegin(TEST_MAP_FIELD_DESC);</div><div class=\"line\">    &#123;</div><div class=\"line\">      oprot.writeMapBegin(<span class=\"keyword\">new</span> org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.testMap.size()));</div><div class=\"line\">      <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; _iter4 : struct.testMap.entrySet())</div><div class=\"line\">      &#123;</div><div class=\"line\">        oprot.writeString(_iter4.getKey());</div><div class=\"line\">        oprot.writeI32(_iter4.getValue());</div><div class=\"line\">      &#125;</div><div class=\"line\">      oprot.writeMapEnd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    oprot.writeFieldEnd();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是其中的一段field的代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TField</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TField</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"string\">\"\"</span>, TType.STOP, (<span class=\"keyword\">short</span>)<span class=\"number\">0</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TField</span><span class=\"params\">(String n, <span class=\"keyword\">byte</span> t, <span class=\"keyword\">short</span> i)</span> </span>&#123;</div><div class=\"line\">    name = n;</div><div class=\"line\">    type = t;</div><div class=\"line\">    id = i;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//字段名字</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</div><div class=\"line\"><span class=\"comment\">//字段类型详情在下面</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>   type;</div><div class=\"line\"><span class=\"comment\">//id，会增长</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">short</span>  id;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;TField name:'\"</span> + name + <span class=\"string\">\"' type:\"</span> + type + <span class=\"string\">\" field-id:\"</span> + id + <span class=\"string\">\"&gt;\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(TField otherField)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> type == otherField.type &amp;&amp; id == otherField.id;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>简单版本</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (struct.isSetTestMap()) &#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    oprot.writeI32(struct.testMap.size());</div><div class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;String, Integer&gt; _iter5 : struct.testMap.entrySet())</div><div class=\"line\">    &#123;</div><div class=\"line\">      oprot.writeString(_iter5.getKey());</div><div class=\"line\">      oprot.writeI32(_iter5.getValue());</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可见简版的写入相对于标准更节省空间。因此传输效率更高。我司采用的是标准传输协议。<br>在读取的时候采用的是对应的方法<br><em>标准协议：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// TEST_MAP</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (schemeField.type == org.apache.thrift.protocol.TType.MAP) &#123;</div><div class=\"line\">    &#123;</div><div class=\"line\">      org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();</div><div class=\"line\">      struct.testMap = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;(<span class=\"number\">2</span>*_map0.size);</div><div class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> _i1 = <span class=\"number\">0</span>; _i1 &lt; _map0.size; ++_i1)</div><div class=\"line\">      &#123;</div><div class=\"line\">        String _key2; <span class=\"comment\">// required</span></div><div class=\"line\">        <span class=\"keyword\">int</span> _val3; <span class=\"comment\">// required</span></div><div class=\"line\">        _key2 = iprot.readString();</div><div class=\"line\">        _val3 = iprot.readI32();</div><div class=\"line\">        struct.testMap.put(_key2, _val3);</div><div class=\"line\">      &#125;</div><div class=\"line\">      iprot.readMapEnd();</div><div class=\"line\">    &#125;</div><div class=\"line\">    struct.setTestMapIsSet(<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure></p>\n<p><em>简单版本</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (incoming.get(<span class=\"number\">1</span>)) &#123; <span class=\"comment\">//incoming标示了有哪些optional被赋值</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    org.apache.thrift.protocol.TMap _map6 = <span class=\"keyword\">new</span> org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());</div><div class=\"line\">    struct.testMap = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;(<span class=\"number\">2</span>*_map6.size);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> _i7 = <span class=\"number\">0</span>; _i7 &lt; _map6.size; ++_i7)</div><div class=\"line\">    &#123;</div><div class=\"line\">      String _key8; <span class=\"comment\">// required</span></div><div class=\"line\">      <span class=\"keyword\">int</span> _val9; <span class=\"comment\">// required</span></div><div class=\"line\">      _key8 = iprot.readString();</div><div class=\"line\">      _val9 = iprot.readI32();</div><div class=\"line\">      struct.testMap.put(_key8, _val9);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  struct.setTestMapIsSet(<span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a><strong>C</strong></h5><p>然后writeMessageEnd，完成了消息的写入  </p>\n<p>整体上来说，如果想要对代码进行缩减或者是更改，需要注意的地方很多，比如读写的顺序。而且在不断的发版过程中的变量顺序调整也会影响数据的序列化和反序列化。<br>因此借用官方的一句话：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * Autogenerated by Thrift Compiler (0.8.0)</span></div><div class=\"line\"><span class=\"comment\"> *</span></div><div class=\"line\"><span class=\"comment\"> * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING</span></div><div class=\"line\"><span class=\"comment\"> *  <span class=\"doctag\">@generated</span></span></div><div class=\"line\"><span class=\"comment\"> */</span></div></pre></td></tr></table></figure></p>"},{"title":"Thrift源码分析--Transport","date":"2017-08-27T01:43:35.000Z","_content":"## 简介    \n\nThrift是一个RPC调用框架，因此底层会封装一层传输层，用来帮助构建好的代码进行数据的传输。  \n其中TTransport封装了传输层，同时他也封装了上层的流。比如他的一个子类：TIOStreamTransport。里面使用的就是我们常用的socket的InputStream和outPutStream  \n\n<!--more-->  \n\nTTransport的设计理念是和我们生成的代码、协议层完全解耦。\n - 我们生成的代码（Client）只需要处理读到的数据以及处理，并不需要关心如何去读取这个数据。\n - 协议层也只需要进行数据的编解码。但是无需关心这些数据是如何来的，是使用的http还是socket还是file等。\n\n### TTransport结构  \n![TTransport](/images/TTransport.jpg \"TTransport结构\")  \n这个并不是一个完整的传输层，还有一部分是在服务端使用的，用来帮助生成的代码来创建一个默认的TTransport，供给服务端使用。如果不好理解，可以类比Socket和ServerSocket。  \n\n### TServerTransport结构  \n![TServerTransport](/images/TServerTransport.jpg \"TServerTransport结构\")  \n\n\n## 分析  \n\n### TTransport  \n下面是源码分析，已经对注解翻译，并且去掉了具体实现  \n\n```java  \npublic abstract class TTransport {\n  // 判断传输是否打开，\n  public abstract boolean isOpen();\n\n  // 判断是否还有新的数据来\n  public boolean peek() { return isOpen(); }\n\n  // 打开传输层，可以用来读写数据了\n  public abstract void open() throws TTransportException;\n\n  // 关闭\n  public abstract void close();\n\n  // 读取指定长度的数据\n  public abstract int read(byte[] buf, int off, int len) throws TTransportException;\n\n  // 把数据全部读取出来\n  public int readAll(byte[] buf, int off, int len) throws TTransportException;\n\n  // 写数据，实际调用的是下面的方法\n  public void write(byte[] buf) throws TTransportException;\n\n  // 写数据\n  public abstract void write(byte[] buf, int off, int len) throws TTransportException;\n\n  // 把缓冲区的数据全部都push出去\n  public void flush() throws TTransportException;\n}\n```\n\n__在实现类中，有这么几个比较重要的子类：__  \n - __TIOStreamTransport:__ 这个类封装了InputStream和OutputStream这两个流，用来处理数据传输中的输入输出流。采用的是阻塞同步IO。  \n   - __TSocket:__ 是上面这个类的子类，并且封装了Socket接口。  \n - __TNonblockingTransport:__ 这个类是非阻塞IO的抽象类。\n   - __TNonblockingSocket:__ 则是使用了SocketChannel进行了非阻塞IO。\n - __TFileTransport:__ 这个类没有仔细研究，里面允许client把文件传输给服务端，同时允许服务端把文件写入到文件。\n - __TFramedTransport:__ 帧传输类就是按照一帧的固定大小来传输数据，所有的写操作首先都是在内存中完成的直到调用了flush操作，\n然后传输节点在flush操作之后将所有数据根据数据的有效载荷写入数据的长度的二进制块发送出去，允许在接收的另一端按照固定的长度来读取。我司的封装是这里的cv操作。\n - __TFastFramedTransport:__ 是快读类，相对于上面的类读取的效率会变的更高。  \n\n__下面从源码角度分析几个比较重要的类:__  \n\n*CASE：TIOStreamTransport，主要以翻译、删减无用代码尽可能突出主干*\n\n```java  \npublic class TIOStreamTransport extends TTransport {\n\n  // Underlying inputStream\n  protected InputStream inputStream_ = null;\n\n  // Underlying outputStream\n  protected OutputStream outputStream_ = null;\n\n  // 这里一共有四个构造方法，主要是对内部的两个传输流进行赋值\n  protected TIOStreamTransport() {}\n\n  // 传入传输流在构造的时候就已经完成了打开，因此时时都是打开的\n  public boolean isOpen() {\n    return true;\n  }\n\n  // 直接抛异常，两个流必须在构造的时候就已经打开了\n  public void open() throws TTransportException {}\n\n  // 关闭流，调用两个流的close方法。去掉了其中的异常处理\n  public void close() {\n    inputStream_.close();\n    inputStream_ = null;\n    outputStream_.close();\n    outputStream_ = null;\n  }\n\n  // 读取数据，调用inputstream中的read方法\n  public int read(byte[] buf, int off, int len) throws TTransportException {\n    int bytesRead = inputStream_.read(buf, off, len);\n    return bytesRead;\n  }\n\n  // 写数据，调用outputstream中的read方法\n  public void write(byte[] buf, int off, int len) throws TTransportException {\n      outputStream_.write(buf, off, len);\n  }\n\n  // 把缓冲区的数据push掉\n  public void flush() throws TTransportException {\n      outputStream_.flush();\n  }\n}  \n```\n\n*下面是他的唯一子类，TSocket，封装了Socket*\n\n```java  \npublic class TSocket extends TIOStreamTransport {\n\n  // socket\n  private Socket socket_ = null;\n\n  // 远程的地址\n  private String host_  = null;\n\n  // 远程端口\n  private int port_ = 0;\n\n  // 超时时间\n  private int timeout_ = 0;\n\n  // 构造方法，使用已经建立链接的socket进行操作\n  public TSocket(Socket socket) throws TTransportException {\n    socket_ = socket;\n    if (isOpen()) {\n       inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);\n       outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n    }\n  }\n\n  // 构造方法\n  public TSocket(String host, int port, int timeout) {\n    // 省略直接赋值操作\n    initSocket();\n  }\n\n  // 创建新的链接\n  private void initSocket() {\n    socket_ = new Socket();\n    // 省略掉赋值操作\n  }\n\n  // 判断是否链接上了\n  public boolean isOpen() {\n    return socket_.isConnected();\n  }\n\n  // 打开链接\n  public void open() throws TTransportException {\n     socket_.connect(new InetSocketAddress(host_, port_), timeout_);\n     inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);\n     outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n  }\n\n  // 关闭链接\n  public void close() {\n    // 关闭stream的关闭方法\n    super.close();\n    socket_.close();\n    socket_ = null;\n  }\n\n}\n```\n\n*CASE:TNonblockingTransport抽象类 主要以翻译为主*  \n\n```java\npublic abstract class TNonblockingTransport extends TTransport {\n\n  // 详情可以看下SocketChannel的connect方法，开启链接\n  public abstract boolean startConnect() throws IOException;\n\n  // 详情可以看下SocketChannel的finishConnect方法，关闭链接\n  public abstract boolean finishConnect() throws IOException;\n\n  // 注册到远程的selector\n  public abstract SelectionKey registerSelector(Selector selector, int interests) throws IOException;\n\n  // 读取数据，采用了ByteBuffer这个缓冲区\n  public abstract int read(ByteBuffer buffer) throws IOException;\n\n\n  // 写入数据，采用了ByteBuffer这个缓冲区\n  public abstract int write(ByteBuffer buffer) throws IOException;\n}\n```\n\n*下面介绍的是他的唯一子类：TNonblockingSocket，需要看到懒加载的位置在哪里，暂时未知，为什么不需要flush呢*  \n```java\npublic class TNonblockingSocket extends TNonblockingTransport {\n  /**\n   * Host and port if passed in, used for lazy non-blocking connect.\n   */\n  private final SocketAddress socketAddress_;\n\n  private final SocketChannel socketChannel_;\n\n  //省略了若干了构造方法，核心构造方法\n  private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) throws IOException {\n    socketChannel_ = socketChannel;\n    socketAddress_ = socketAddress;\n    // 设置非阻塞信道\n    socketChannel.configureBlocking(false);\n\n    // 设置该信道里面的socket参数\n    Socket socket = socketChannel.socket();\n    socket.setSoLinger(false, 0);\n    socket.setTcpNoDelay(true);\n    setTimeout(timeout);\n  }\n\n  // 注册一个新的选择器\n  public SelectionKey registerSelector(Selector selector, int interests) throws IOException {\n    return socketChannel_.register(selector, interests);\n  }\n\n  // 设置超时时间\n  public void setTimeout(int timeout) {\n     socketChannel_.socket().setSoTimeout(timeout);\n  }\n\n  // 判断当前信道是否开启\n  public boolean isOpen() {\n    // isConnect方法并不会在关闭以后返回false，所以这里使用isOpen方法\n    return socketChannel_.isOpen() && socketChannel_.isConnected();\n  }\n\n  // 实现类实现了懒加载，所以不需要手动打开\n  public void open() throws TTransportException {\n    throw new RuntimeException(\"open() is not implemented for TNonblockingSocket\");\n  }\n\n  // 使用ByteBuffer缓冲区读数据\n  public int read(ByteBuffer buffer) throws IOException {\n    return socketChannel_.read(buffer);\n  }\n\n  // 使用ByteBuffer缓冲区写数据\n  public int write(ByteBuffer buffer) throws IOException {\n    return socketChannel_.write(buffer);\n  }\n\n  // 不支持flush，为什么呢。没有缓冲区么\n  public void flush() throws TTransportException {\n    // Not supported by SocketChannel.\n  }\n\n  // 关闭链接\n  public void close() {\n     socketChannel_.close();\n  }\n\n  /** {@inheritDoc} */\n  public boolean startConnect() throws IOException {\n    return socketChannel_.connect(socketAddress_);\n  }\n\n  /** {@inheritDoc} */\n  public boolean finishConnect() throws IOException {\n    return socketChannel_.finishConnect();\n  }\n\n}\n```\n","source":"_posts/Thrift源码分析-Transport.md","raw":"---\ntitle: Thrift源码分析--Transport\ndate: 2017-08-27 09:43:35\ntags:\n  - RPC\n  - 原理\n  - 源码\n  - Thrift\n---\n## 简介    \n\nThrift是一个RPC调用框架，因此底层会封装一层传输层，用来帮助构建好的代码进行数据的传输。  \n其中TTransport封装了传输层，同时他也封装了上层的流。比如他的一个子类：TIOStreamTransport。里面使用的就是我们常用的socket的InputStream和outPutStream  \n\n<!--more-->  \n\nTTransport的设计理念是和我们生成的代码、协议层完全解耦。\n - 我们生成的代码（Client）只需要处理读到的数据以及处理，并不需要关心如何去读取这个数据。\n - 协议层也只需要进行数据的编解码。但是无需关心这些数据是如何来的，是使用的http还是socket还是file等。\n\n### TTransport结构  \n![TTransport](/images/TTransport.jpg \"TTransport结构\")  \n这个并不是一个完整的传输层，还有一部分是在服务端使用的，用来帮助生成的代码来创建一个默认的TTransport，供给服务端使用。如果不好理解，可以类比Socket和ServerSocket。  \n\n### TServerTransport结构  \n![TServerTransport](/images/TServerTransport.jpg \"TServerTransport结构\")  \n\n\n## 分析  \n\n### TTransport  \n下面是源码分析，已经对注解翻译，并且去掉了具体实现  \n\n```java  \npublic abstract class TTransport {\n  // 判断传输是否打开，\n  public abstract boolean isOpen();\n\n  // 判断是否还有新的数据来\n  public boolean peek() { return isOpen(); }\n\n  // 打开传输层，可以用来读写数据了\n  public abstract void open() throws TTransportException;\n\n  // 关闭\n  public abstract void close();\n\n  // 读取指定长度的数据\n  public abstract int read(byte[] buf, int off, int len) throws TTransportException;\n\n  // 把数据全部读取出来\n  public int readAll(byte[] buf, int off, int len) throws TTransportException;\n\n  // 写数据，实际调用的是下面的方法\n  public void write(byte[] buf) throws TTransportException;\n\n  // 写数据\n  public abstract void write(byte[] buf, int off, int len) throws TTransportException;\n\n  // 把缓冲区的数据全部都push出去\n  public void flush() throws TTransportException;\n}\n```\n\n__在实现类中，有这么几个比较重要的子类：__  \n - __TIOStreamTransport:__ 这个类封装了InputStream和OutputStream这两个流，用来处理数据传输中的输入输出流。采用的是阻塞同步IO。  \n   - __TSocket:__ 是上面这个类的子类，并且封装了Socket接口。  \n - __TNonblockingTransport:__ 这个类是非阻塞IO的抽象类。\n   - __TNonblockingSocket:__ 则是使用了SocketChannel进行了非阻塞IO。\n - __TFileTransport:__ 这个类没有仔细研究，里面允许client把文件传输给服务端，同时允许服务端把文件写入到文件。\n - __TFramedTransport:__ 帧传输类就是按照一帧的固定大小来传输数据，所有的写操作首先都是在内存中完成的直到调用了flush操作，\n然后传输节点在flush操作之后将所有数据根据数据的有效载荷写入数据的长度的二进制块发送出去，允许在接收的另一端按照固定的长度来读取。我司的封装是这里的cv操作。\n - __TFastFramedTransport:__ 是快读类，相对于上面的类读取的效率会变的更高。  \n\n__下面从源码角度分析几个比较重要的类:__  \n\n*CASE：TIOStreamTransport，主要以翻译、删减无用代码尽可能突出主干*\n\n```java  \npublic class TIOStreamTransport extends TTransport {\n\n  // Underlying inputStream\n  protected InputStream inputStream_ = null;\n\n  // Underlying outputStream\n  protected OutputStream outputStream_ = null;\n\n  // 这里一共有四个构造方法，主要是对内部的两个传输流进行赋值\n  protected TIOStreamTransport() {}\n\n  // 传入传输流在构造的时候就已经完成了打开，因此时时都是打开的\n  public boolean isOpen() {\n    return true;\n  }\n\n  // 直接抛异常，两个流必须在构造的时候就已经打开了\n  public void open() throws TTransportException {}\n\n  // 关闭流，调用两个流的close方法。去掉了其中的异常处理\n  public void close() {\n    inputStream_.close();\n    inputStream_ = null;\n    outputStream_.close();\n    outputStream_ = null;\n  }\n\n  // 读取数据，调用inputstream中的read方法\n  public int read(byte[] buf, int off, int len) throws TTransportException {\n    int bytesRead = inputStream_.read(buf, off, len);\n    return bytesRead;\n  }\n\n  // 写数据，调用outputstream中的read方法\n  public void write(byte[] buf, int off, int len) throws TTransportException {\n      outputStream_.write(buf, off, len);\n  }\n\n  // 把缓冲区的数据push掉\n  public void flush() throws TTransportException {\n      outputStream_.flush();\n  }\n}  \n```\n\n*下面是他的唯一子类，TSocket，封装了Socket*\n\n```java  \npublic class TSocket extends TIOStreamTransport {\n\n  // socket\n  private Socket socket_ = null;\n\n  // 远程的地址\n  private String host_  = null;\n\n  // 远程端口\n  private int port_ = 0;\n\n  // 超时时间\n  private int timeout_ = 0;\n\n  // 构造方法，使用已经建立链接的socket进行操作\n  public TSocket(Socket socket) throws TTransportException {\n    socket_ = socket;\n    if (isOpen()) {\n       inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);\n       outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n    }\n  }\n\n  // 构造方法\n  public TSocket(String host, int port, int timeout) {\n    // 省略直接赋值操作\n    initSocket();\n  }\n\n  // 创建新的链接\n  private void initSocket() {\n    socket_ = new Socket();\n    // 省略掉赋值操作\n  }\n\n  // 判断是否链接上了\n  public boolean isOpen() {\n    return socket_.isConnected();\n  }\n\n  // 打开链接\n  public void open() throws TTransportException {\n     socket_.connect(new InetSocketAddress(host_, port_), timeout_);\n     inputStream_ = new BufferedInputStream(socket_.getInputStream(), 1024);\n     outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n  }\n\n  // 关闭链接\n  public void close() {\n    // 关闭stream的关闭方法\n    super.close();\n    socket_.close();\n    socket_ = null;\n  }\n\n}\n```\n\n*CASE:TNonblockingTransport抽象类 主要以翻译为主*  \n\n```java\npublic abstract class TNonblockingTransport extends TTransport {\n\n  // 详情可以看下SocketChannel的connect方法，开启链接\n  public abstract boolean startConnect() throws IOException;\n\n  // 详情可以看下SocketChannel的finishConnect方法，关闭链接\n  public abstract boolean finishConnect() throws IOException;\n\n  // 注册到远程的selector\n  public abstract SelectionKey registerSelector(Selector selector, int interests) throws IOException;\n\n  // 读取数据，采用了ByteBuffer这个缓冲区\n  public abstract int read(ByteBuffer buffer) throws IOException;\n\n\n  // 写入数据，采用了ByteBuffer这个缓冲区\n  public abstract int write(ByteBuffer buffer) throws IOException;\n}\n```\n\n*下面介绍的是他的唯一子类：TNonblockingSocket，需要看到懒加载的位置在哪里，暂时未知，为什么不需要flush呢*  \n```java\npublic class TNonblockingSocket extends TNonblockingTransport {\n  /**\n   * Host and port if passed in, used for lazy non-blocking connect.\n   */\n  private final SocketAddress socketAddress_;\n\n  private final SocketChannel socketChannel_;\n\n  //省略了若干了构造方法，核心构造方法\n  private TNonblockingSocket(SocketChannel socketChannel, int timeout, SocketAddress socketAddress) throws IOException {\n    socketChannel_ = socketChannel;\n    socketAddress_ = socketAddress;\n    // 设置非阻塞信道\n    socketChannel.configureBlocking(false);\n\n    // 设置该信道里面的socket参数\n    Socket socket = socketChannel.socket();\n    socket.setSoLinger(false, 0);\n    socket.setTcpNoDelay(true);\n    setTimeout(timeout);\n  }\n\n  // 注册一个新的选择器\n  public SelectionKey registerSelector(Selector selector, int interests) throws IOException {\n    return socketChannel_.register(selector, interests);\n  }\n\n  // 设置超时时间\n  public void setTimeout(int timeout) {\n     socketChannel_.socket().setSoTimeout(timeout);\n  }\n\n  // 判断当前信道是否开启\n  public boolean isOpen() {\n    // isConnect方法并不会在关闭以后返回false，所以这里使用isOpen方法\n    return socketChannel_.isOpen() && socketChannel_.isConnected();\n  }\n\n  // 实现类实现了懒加载，所以不需要手动打开\n  public void open() throws TTransportException {\n    throw new RuntimeException(\"open() is not implemented for TNonblockingSocket\");\n  }\n\n  // 使用ByteBuffer缓冲区读数据\n  public int read(ByteBuffer buffer) throws IOException {\n    return socketChannel_.read(buffer);\n  }\n\n  // 使用ByteBuffer缓冲区写数据\n  public int write(ByteBuffer buffer) throws IOException {\n    return socketChannel_.write(buffer);\n  }\n\n  // 不支持flush，为什么呢。没有缓冲区么\n  public void flush() throws TTransportException {\n    // Not supported by SocketChannel.\n  }\n\n  // 关闭链接\n  public void close() {\n     socketChannel_.close();\n  }\n\n  /** {@inheritDoc} */\n  public boolean startConnect() throws IOException {\n    return socketChannel_.connect(socketAddress_);\n  }\n\n  /** {@inheritDoc} */\n  public boolean finishConnect() throws IOException {\n    return socketChannel_.finishConnect();\n  }\n\n}\n```\n","slug":"Thrift源码分析-Transport","published":1,"updated":"2018-01-30T16:41:49.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gk0008iifyby9gqin0","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Thrift是一个RPC调用框架，因此底层会封装一层传输层，用来帮助构建好的代码进行数据的传输。<br>其中TTransport封装了传输层，同时他也封装了上层的流。比如他的一个子类：TIOStreamTransport。里面使用的就是我们常用的socket的InputStream和outPutStream  </p>\n<a id=\"more\"></a>  \n<p>TTransport的设计理念是和我们生成的代码、协议层完全解耦。</p>\n<ul>\n<li>我们生成的代码（Client）只需要处理读到的数据以及处理，并不需要关心如何去读取这个数据。</li>\n<li>协议层也只需要进行数据的编解码。但是无需关心这些数据是如何来的，是使用的http还是socket还是file等。</li>\n</ul>\n<h3 id=\"TTransport结构\"><a href=\"#TTransport结构\" class=\"headerlink\" title=\"TTransport结构\"></a>TTransport结构</h3><p><img src=\"/images/TTransport.jpg\" alt=\"TTransport\" title=\"TTransport结构\"><br>这个并不是一个完整的传输层，还有一部分是在服务端使用的，用来帮助生成的代码来创建一个默认的TTransport，供给服务端使用。如果不好理解，可以类比Socket和ServerSocket。  </p>\n<h3 id=\"TServerTransport结构\"><a href=\"#TServerTransport结构\" class=\"headerlink\" title=\"TServerTransport结构\"></a>TServerTransport结构</h3><p><img src=\"/images/TServerTransport.jpg\" alt=\"TServerTransport\" title=\"TServerTransport结构\">  </p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"TTransport\"><a href=\"#TTransport\" class=\"headerlink\" title=\"TTransport\"></a>TTransport</h3><p>下面是源码分析，已经对注解翻译，并且去掉了具体实现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 判断传输是否打开，</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否还有新的数据来</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> isOpen(); &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 打开传输层，可以用来读写数据了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取指定长度的数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把数据全部读取出来</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">readAll</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据，实际调用的是下面的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把缓冲区的数据全部都push出去</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在实现类中，有这么几个比较重要的子类：</strong>  </p>\n<ul>\n<li><strong>TIOStreamTransport:</strong> 这个类封装了InputStream和OutputStream这两个流，用来处理数据传输中的输入输出流。采用的是阻塞同步IO。  <ul>\n<li><strong>TSocket:</strong> 是上面这个类的子类，并且封装了Socket接口。  </li>\n</ul>\n</li>\n<li><strong>TNonblockingTransport:</strong> 这个类是非阻塞IO的抽象类。<ul>\n<li><strong>TNonblockingSocket:</strong> 则是使用了SocketChannel进行了非阻塞IO。</li>\n</ul>\n</li>\n<li><strong>TFileTransport:</strong> 这个类没有仔细研究，里面允许client把文件传输给服务端，同时允许服务端把文件写入到文件。</li>\n<li><strong>TFramedTransport:</strong> 帧传输类就是按照一帧的固定大小来传输数据，所有的写操作首先都是在内存中完成的直到调用了flush操作，<br>然后传输节点在flush操作之后将所有数据根据数据的有效载荷写入数据的长度的二进制块发送出去，允许在接收的另一端按照固定的长度来读取。我司的封装是这里的cv操作。</li>\n<li><strong>TFastFramedTransport:</strong> 是快读类，相对于上面的类读取的效率会变的更高。  </li>\n</ul>\n<p><strong>下面从源码角度分析几个比较重要的类:</strong>  </p>\n<p><em>CASE：TIOStreamTransport，主要以翻译、删减无用代码尽可能突出主干</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TIOStreamTransport</span> <span class=\"keyword\">extends</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Underlying inputStream</span></div><div class=\"line\">  <span class=\"keyword\">protected</span> InputStream inputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Underlying outputStream</span></div><div class=\"line\">  <span class=\"keyword\">protected</span> OutputStream outputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里一共有四个构造方法，主要是对内部的两个传输流进行赋值</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">TIOStreamTransport</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 传入传输流在构造的时候就已经完成了打开，因此时时都是打开的</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 直接抛异常，两个流必须在构造的时候就已经打开了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭流，调用两个流的close方法。去掉了其中的异常处理</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    inputStream_.close();</div><div class=\"line\">    inputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">    outputStream_.close();</div><div class=\"line\">    outputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取数据，调用inputstream中的read方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> bytesRead = inputStream_.read(buf, off, len);</div><div class=\"line\">    <span class=\"keyword\">return</span> bytesRead;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据，调用outputstream中的read方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">      outputStream_.write(buf, off, len);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把缓冲区的数据push掉</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">      outputStream_.flush();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>下面是他的唯一子类，TSocket，封装了Socket</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">TIOStreamTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// socket</span></div><div class=\"line\">  <span class=\"keyword\">private</span> Socket socket_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 远程的地址</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String host_  = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 远程端口</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port_ = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时时间</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timeout_ = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 构造方法，使用已经建立链接的socket进行操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TSocket</span><span class=\"params\">(Socket socket)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    socket_ = socket;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isOpen()) &#123;</div><div class=\"line\">       inputStream_ = <span class=\"keyword\">new</span> BufferedInputStream(socket_.getInputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">       outputStream_ = <span class=\"keyword\">new</span> BufferedOutputStream(socket_.getOutputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 构造方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TSocket</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 省略直接赋值操作</span></div><div class=\"line\">    initSocket();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 创建新的链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSocket</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    socket_ = <span class=\"keyword\">new</span> Socket();</div><div class=\"line\">    <span class=\"comment\">// 省略掉赋值操作</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否链接上了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socket_.isConnected();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 打开链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">     socket_.connect(<span class=\"keyword\">new</span> InetSocketAddress(host_, port_), timeout_);</div><div class=\"line\">     inputStream_ = <span class=\"keyword\">new</span> BufferedInputStream(socket_.getInputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">     outputStream_ = <span class=\"keyword\">new</span> BufferedOutputStream(socket_.getOutputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关闭stream的关闭方法</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.close();</div><div class=\"line\">    socket_.close();</div><div class=\"line\">    socket_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>CASE:TNonblockingTransport抽象类 主要以翻译为主</em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TNonblockingTransport</span> <span class=\"keyword\">extends</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 详情可以看下SocketChannel的connect方法，开启链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 详情可以看下SocketChannel的finishConnect方法，关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">finishConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册到远程的selector</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> SelectionKey <span class=\"title\">registerSelector</span><span class=\"params\">(Selector selector, <span class=\"keyword\">int</span> interests)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取数据，采用了ByteBuffer这个缓冲区</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写入数据，采用了ByteBuffer这个缓冲区</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>下面介绍的是他的唯一子类：TNonblockingSocket，需要看到懒加载的位置在哪里，暂时未知，为什么不需要flush呢</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TNonblockingSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">TNonblockingTransport</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Host and port if passed in, used for lazy non-blocking connect.</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketAddress socketAddress_;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketChannel socketChannel_;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//省略了若干了构造方法，核心构造方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">TNonblockingSocket</span><span class=\"params\">(SocketChannel socketChannel, <span class=\"keyword\">int</span> timeout, SocketAddress socketAddress)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    socketChannel_ = socketChannel;</div><div class=\"line\">    socketAddress_ = socketAddress;</div><div class=\"line\">    <span class=\"comment\">// 设置非阻塞信道</span></div><div class=\"line\">    socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置该信道里面的socket参数</span></div><div class=\"line\">    Socket socket = socketChannel.socket();</div><div class=\"line\">    socket.setSoLinger(<span class=\"keyword\">false</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    socket.setTcpNoDelay(<span class=\"keyword\">true</span>);</div><div class=\"line\">    setTimeout(timeout);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册一个新的选择器</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SelectionKey <span class=\"title\">registerSelector</span><span class=\"params\">(Selector selector, <span class=\"keyword\">int</span> interests)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.register(selector, interests);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 设置超时时间</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span> </span>&#123;</div><div class=\"line\">     socketChannel_.socket().setSoTimeout(timeout);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断当前信道是否开启</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// isConnect方法并不会在关闭以后返回false，所以这里使用isOpen方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.isOpen() &amp;&amp; socketChannel_.isConnected();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 实现类实现了懒加载，所以不需要手动打开</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"open() is not implemented for TNonblockingSocket\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用ByteBuffer缓冲区读数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.read(buffer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用ByteBuffer缓冲区写数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.write(buffer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 不支持flush，为什么呢。没有缓冲区么</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Not supported by SocketChannel.</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     socketChannel_.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** &#123;<span class=\"doctag\">@inheritDoc</span>&#125; */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.connect(socketAddress_);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** &#123;<span class=\"doctag\">@inheritDoc</span>&#125; */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">finishConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.finishConnect();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Thrift是一个RPC调用框架，因此底层会封装一层传输层，用来帮助构建好的代码进行数据的传输。<br>其中TTransport封装了传输层，同时他也封装了上层的流。比如他的一个子类：TIOStreamTransport。里面使用的就是我们常用的socket的InputStream和outPutStream  </p>","more":"<p>TTransport的设计理念是和我们生成的代码、协议层完全解耦。</p>\n<ul>\n<li>我们生成的代码（Client）只需要处理读到的数据以及处理，并不需要关心如何去读取这个数据。</li>\n<li>协议层也只需要进行数据的编解码。但是无需关心这些数据是如何来的，是使用的http还是socket还是file等。</li>\n</ul>\n<h3 id=\"TTransport结构\"><a href=\"#TTransport结构\" class=\"headerlink\" title=\"TTransport结构\"></a>TTransport结构</h3><p><img src=\"/images/TTransport.jpg\" alt=\"TTransport\" title=\"TTransport结构\"><br>这个并不是一个完整的传输层，还有一部分是在服务端使用的，用来帮助生成的代码来创建一个默认的TTransport，供给服务端使用。如果不好理解，可以类比Socket和ServerSocket。  </p>\n<h3 id=\"TServerTransport结构\"><a href=\"#TServerTransport结构\" class=\"headerlink\" title=\"TServerTransport结构\"></a>TServerTransport结构</h3><p><img src=\"/images/TServerTransport.jpg\" alt=\"TServerTransport\" title=\"TServerTransport结构\">  </p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"TTransport\"><a href=\"#TTransport\" class=\"headerlink\" title=\"TTransport\"></a>TTransport</h3><p>下面是源码分析，已经对注解翻译，并且去掉了具体实现  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 判断传输是否打开，</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否还有新的数据来</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">peek</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> isOpen(); &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 打开传输层，可以用来读写数据了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取指定长度的数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把数据全部读取出来</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">readAll</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据，实际调用的是下面的方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把缓冲区的数据全部都push出去</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>在实现类中，有这么几个比较重要的子类：</strong>  </p>\n<ul>\n<li><strong>TIOStreamTransport:</strong> 这个类封装了InputStream和OutputStream这两个流，用来处理数据传输中的输入输出流。采用的是阻塞同步IO。  <ul>\n<li><strong>TSocket:</strong> 是上面这个类的子类，并且封装了Socket接口。  </li>\n</ul>\n</li>\n<li><strong>TNonblockingTransport:</strong> 这个类是非阻塞IO的抽象类。<ul>\n<li><strong>TNonblockingSocket:</strong> 则是使用了SocketChannel进行了非阻塞IO。</li>\n</ul>\n</li>\n<li><strong>TFileTransport:</strong> 这个类没有仔细研究，里面允许client把文件传输给服务端，同时允许服务端把文件写入到文件。</li>\n<li><strong>TFramedTransport:</strong> 帧传输类就是按照一帧的固定大小来传输数据，所有的写操作首先都是在内存中完成的直到调用了flush操作，<br>然后传输节点在flush操作之后将所有数据根据数据的有效载荷写入数据的长度的二进制块发送出去，允许在接收的另一端按照固定的长度来读取。我司的封装是这里的cv操作。</li>\n<li><strong>TFastFramedTransport:</strong> 是快读类，相对于上面的类读取的效率会变的更高。  </li>\n</ul>\n<p><strong>下面从源码角度分析几个比较重要的类:</strong>  </p>\n<p><em>CASE：TIOStreamTransport，主要以翻译、删减无用代码尽可能突出主干</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TIOStreamTransport</span> <span class=\"keyword\">extends</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Underlying inputStream</span></div><div class=\"line\">  <span class=\"keyword\">protected</span> InputStream inputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Underlying outputStream</span></div><div class=\"line\">  <span class=\"keyword\">protected</span> OutputStream outputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 这里一共有四个构造方法，主要是对内部的两个传输流进行赋值</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">TIOStreamTransport</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 传入传输流在构造的时候就已经完成了打开，因此时时都是打开的</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 直接抛异常，两个流必须在构造的时候就已经打开了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭流，调用两个流的close方法。去掉了其中的异常处理</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    inputStream_.close();</div><div class=\"line\">    inputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">    outputStream_.close();</div><div class=\"line\">    outputStream_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取数据，调用inputstream中的read方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> bytesRead = inputStream_.read(buf, off, len);</div><div class=\"line\">    <span class=\"keyword\">return</span> bytesRead;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写数据，调用outputstream中的read方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] buf, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">      outputStream_.write(buf, off, len);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把缓冲区的数据push掉</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">      outputStream_.flush();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>下面是他的唯一子类，TSocket，封装了Socket</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">TIOStreamTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// socket</span></div><div class=\"line\">  <span class=\"keyword\">private</span> Socket socket_ = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 远程的地址</span></div><div class=\"line\">  <span class=\"keyword\">private</span> String host_  = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 远程端口</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port_ = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 超时时间</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timeout_ = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 构造方法，使用已经建立链接的socket进行操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TSocket</span><span class=\"params\">(Socket socket)</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    socket_ = socket;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isOpen()) &#123;</div><div class=\"line\">       inputStream_ = <span class=\"keyword\">new</span> BufferedInputStream(socket_.getInputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">       outputStream_ = <span class=\"keyword\">new</span> BufferedOutputStream(socket_.getOutputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 构造方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TSocket</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port, <span class=\"keyword\">int</span> timeout)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 省略直接赋值操作</span></div><div class=\"line\">    initSocket();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 创建新的链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSocket</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    socket_ = <span class=\"keyword\">new</span> Socket();</div><div class=\"line\">    <span class=\"comment\">// 省略掉赋值操作</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否链接上了</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socket_.isConnected();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 打开链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">     socket_.connect(<span class=\"keyword\">new</span> InetSocketAddress(host_, port_), timeout_);</div><div class=\"line\">     inputStream_ = <span class=\"keyword\">new</span> BufferedInputStream(socket_.getInputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">     outputStream_ = <span class=\"keyword\">new</span> BufferedOutputStream(socket_.getOutputStream(), <span class=\"number\">1024</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 关闭stream的关闭方法</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.close();</div><div class=\"line\">    socket_.close();</div><div class=\"line\">    socket_ = <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>CASE:TNonblockingTransport抽象类 主要以翻译为主</em>  </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TNonblockingTransport</span> <span class=\"keyword\">extends</span> <span class=\"title\">TTransport</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 详情可以看下SocketChannel的connect方法，开启链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 详情可以看下SocketChannel的finishConnect方法，关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">finishConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册到远程的selector</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> SelectionKey <span class=\"title\">registerSelector</span><span class=\"params\">(Selector selector, <span class=\"keyword\">int</span> interests)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 读取数据，采用了ByteBuffer这个缓冲区</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 写入数据，采用了ByteBuffer这个缓冲区</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>下面介绍的是他的唯一子类：TNonblockingSocket，需要看到懒加载的位置在哪里，暂时未知，为什么不需要flush呢</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TNonblockingSocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">TNonblockingTransport</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">   * Host and port if passed in, used for lazy non-blocking connect.</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketAddress socketAddress_;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SocketChannel socketChannel_;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//省略了若干了构造方法，核心构造方法</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">TNonblockingSocket</span><span class=\"params\">(SocketChannel socketChannel, <span class=\"keyword\">int</span> timeout, SocketAddress socketAddress)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    socketChannel_ = socketChannel;</div><div class=\"line\">    socketAddress_ = socketAddress;</div><div class=\"line\">    <span class=\"comment\">// 设置非阻塞信道</span></div><div class=\"line\">    socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 设置该信道里面的socket参数</span></div><div class=\"line\">    Socket socket = socketChannel.socket();</div><div class=\"line\">    socket.setSoLinger(<span class=\"keyword\">false</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    socket.setTcpNoDelay(<span class=\"keyword\">true</span>);</div><div class=\"line\">    setTimeout(timeout);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册一个新的选择器</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SelectionKey <span class=\"title\">registerSelector</span><span class=\"params\">(Selector selector, <span class=\"keyword\">int</span> interests)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.register(selector, interests);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 设置超时时间</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> timeout)</span> </span>&#123;</div><div class=\"line\">     socketChannel_.socket().setSoTimeout(timeout);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断当前信道是否开启</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOpen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// isConnect方法并不会在关闭以后返回false，所以这里使用isOpen方法</span></div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.isOpen() &amp;&amp; socketChannel_.isConnected();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 实现类实现了懒加载，所以不需要手动打开</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"open() is not implemented for TNonblockingSocket\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用ByteBuffer缓冲区读数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.read(buffer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 使用ByteBuffer缓冲区写数据</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">write</span><span class=\"params\">(ByteBuffer buffer)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.write(buffer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 不支持flush，为什么呢。没有缓冲区么</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">flush</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> TTransportException </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Not supported by SocketChannel.</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 关闭链接</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     socketChannel_.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** &#123;<span class=\"doctag\">@inheritDoc</span>&#125; */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">startConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.connect(socketAddress_);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** &#123;<span class=\"doctag\">@inheritDoc</span>&#125; */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">finishConnect</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> socketChannel_.finishConnect();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Thrift源码分析--原生调用例子","date":"2017-08-14T16:10:20.000Z","_content":"\n## 简介    \n\n在所有的内容开始之前，我们来使用一下，最原始的Thrift用法。并且附上源码～\n\n<!--more-->  \n\n#### Thrift文件(idl)\n```java\nnamespace java com.kris.thrift.demo.service\n\nservice DemoService {\n    //hello world\n    string helloWorld(1:string name)\n\n}\n```\n\n#### Server端(java)\n```java\npackage com.kris.thrift.demo.service;\n\nimport org.apache.thrift.TProcessor;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.server.TServer;\nimport org.apache.thrift.server.TSimpleServer;\nimport org.apache.thrift.transport.TServerSocket;\n\npublic class Server{\n    public static final int SERVER_PORT = 9001;\n\n    public void startServer() {\n        try {\n            System.out.println(\"TSimpleServer start ....\");\n\n            TProcessor tprocessor = new DemoService.Processor<DemoService.Iface>(\n                    new DemoServiceImpl());\n\n            TServerSocket serverTransport = new TServerSocket(SERVER_PORT);\n            TServer.Args tArgs = new TServer.Args(serverTransport);\n            tArgs.processor(tprocessor);\n            tArgs.protocolFactory(new TBinaryProtocol.Factory());\n            TServer server = new TSimpleServer(tArgs);\n            server.serve();\n\n        } catch (Exception e) {\n            System.out.println(\"Server start error!!!\");\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        Server server = new Server();\n        server.startServer();\n    }\n\n}\n```\n\n#### Client(java)\n```java\npackage com.kris.thrift.demo.service;\n\nimport org.apache.thrift.TException;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TSocket;\nimport org.apache.thrift.transport.TTransport;\nimport org.apache.thrift.transport.TTransportException;\nimport org.apache.thrift.transport.TFramedTransport;\n\n\nimport java.net.Inet4Address;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.util.Enumeration;\n\n\npublic class Client {\n\n    public static final int SERVER_PORT = 9001;\n    public static final int TIMEOUT = 30000;\n    public static TTransport transport = null;\n\n    public static DemoService.Client client;\n\n    public static void initClient() {\n        try {\n            transport = new TSocket(getLocalIp(), SERVER_PORT, TIMEOUT);\n\n            transport.open();\n\n            TProtocol protocol = new TBinaryProtocol(transport);\n\n            client = new DemoService.Client(protocol);\n\n\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void destroyClient(){\n        if (null != transport)\n            transport.close();\n    }\n\n\n    public static String getLocalIp(){\n        String ipAddress = null;\n        Enumeration<NetworkInterface> net = null;\n        try {\n            net = NetworkInterface.getNetworkInterfaces();\n        } catch (SocketException e) {\n            throw new RuntimeException(e);\n        }\n\n        while(net.hasMoreElements()){\n            NetworkInterface element = net.nextElement();\n            Enumeration<InetAddress> addresses = element.getInetAddresses();\n            while (addresses.hasMoreElements()){\n                InetAddress ip = addresses.nextElement();\n                if (ip instanceof Inet4Address){\n\n                    if (ip.isSiteLocalAddress()){\n\n                        ipAddress = ip.getHostAddress();\n                    }\n\n                }\n\n            }\n        }\n        return ipAddress;\n    }\n}\n```\n\n\n#### 代码下载地址\n[Demo](/uploads/thrift例子.zip)\n","source":"_posts/Thrift源码分析-原生调用例子.md","raw":"---\ntitle: Thrift源码分析--原生调用例子\ntags:\n  - RPC\n  - 原理\n  - 源码\n  - Thrift\ndate: 2017-08-15 00:10:20\n---\n\n## 简介    \n\n在所有的内容开始之前，我们来使用一下，最原始的Thrift用法。并且附上源码～\n\n<!--more-->  \n\n#### Thrift文件(idl)\n```java\nnamespace java com.kris.thrift.demo.service\n\nservice DemoService {\n    //hello world\n    string helloWorld(1:string name)\n\n}\n```\n\n#### Server端(java)\n```java\npackage com.kris.thrift.demo.service;\n\nimport org.apache.thrift.TProcessor;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.server.TServer;\nimport org.apache.thrift.server.TSimpleServer;\nimport org.apache.thrift.transport.TServerSocket;\n\npublic class Server{\n    public static final int SERVER_PORT = 9001;\n\n    public void startServer() {\n        try {\n            System.out.println(\"TSimpleServer start ....\");\n\n            TProcessor tprocessor = new DemoService.Processor<DemoService.Iface>(\n                    new DemoServiceImpl());\n\n            TServerSocket serverTransport = new TServerSocket(SERVER_PORT);\n            TServer.Args tArgs = new TServer.Args(serverTransport);\n            tArgs.processor(tprocessor);\n            tArgs.protocolFactory(new TBinaryProtocol.Factory());\n            TServer server = new TSimpleServer(tArgs);\n            server.serve();\n\n        } catch (Exception e) {\n            System.out.println(\"Server start error!!!\");\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        Server server = new Server();\n        server.startServer();\n    }\n\n}\n```\n\n#### Client(java)\n```java\npackage com.kris.thrift.demo.service;\n\nimport org.apache.thrift.TException;\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TProtocol;\nimport org.apache.thrift.transport.TSocket;\nimport org.apache.thrift.transport.TTransport;\nimport org.apache.thrift.transport.TTransportException;\nimport org.apache.thrift.transport.TFramedTransport;\n\n\nimport java.net.Inet4Address;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.SocketException;\nimport java.util.Enumeration;\n\n\npublic class Client {\n\n    public static final int SERVER_PORT = 9001;\n    public static final int TIMEOUT = 30000;\n    public static TTransport transport = null;\n\n    public static DemoService.Client client;\n\n    public static void initClient() {\n        try {\n            transport = new TSocket(getLocalIp(), SERVER_PORT, TIMEOUT);\n\n            transport.open();\n\n            TProtocol protocol = new TBinaryProtocol(transport);\n\n            client = new DemoService.Client(protocol);\n\n\n        }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n\n    }\n\n    public static void destroyClient(){\n        if (null != transport)\n            transport.close();\n    }\n\n\n    public static String getLocalIp(){\n        String ipAddress = null;\n        Enumeration<NetworkInterface> net = null;\n        try {\n            net = NetworkInterface.getNetworkInterfaces();\n        } catch (SocketException e) {\n            throw new RuntimeException(e);\n        }\n\n        while(net.hasMoreElements()){\n            NetworkInterface element = net.nextElement();\n            Enumeration<InetAddress> addresses = element.getInetAddresses();\n            while (addresses.hasMoreElements()){\n                InetAddress ip = addresses.nextElement();\n                if (ip instanceof Inet4Address){\n\n                    if (ip.isSiteLocalAddress()){\n\n                        ipAddress = ip.getHostAddress();\n                    }\n\n                }\n\n            }\n        }\n        return ipAddress;\n    }\n}\n```\n\n\n#### 代码下载地址\n[Demo](/uploads/thrift例子.zip)\n","slug":"Thrift源码分析-原生调用例子","published":1,"updated":"2018-01-29T15:22:58.448Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gn000aiifydf9rpv7s","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在所有的内容开始之前，我们来使用一下，最原始的Thrift用法。并且附上源码～</p>\n<a id=\"more\"></a>  \n<h4 id=\"Thrift文件-idl\"><a href=\"#Thrift文件-idl\" class=\"headerlink\" title=\"Thrift文件(idl)\"></a>Thrift文件(idl)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace java com.kris.thrift.demo.service</div><div class=\"line\"></div><div class=\"line\">service DemoService &#123;</div><div class=\"line\">    <span class=\"comment\">//hello world</span></div><div class=\"line\">    <span class=\"function\">string <span class=\"title\">helloWorld</span><span class=\"params\">(<span class=\"number\">1</span>:string name)</span></span></div><div class=\"line\"><span class=\"function\"></span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Server端-java\"><a href=\"#Server端-java\" class=\"headerlink\" title=\"Server端(java)\"></a>Server端(java)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.kris.thrift.demo.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TProcessor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.server.TServer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.server.TSimpleServer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TServerSocket;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERVER_PORT = <span class=\"number\">9001</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startServer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"TSimpleServer start ....\"</span>);</div><div class=\"line\"></div><div class=\"line\">            TProcessor tprocessor = <span class=\"keyword\">new</span> DemoService.Processor&lt;DemoService.Iface&gt;(</div><div class=\"line\">                    <span class=\"keyword\">new</span> DemoServiceImpl());</div><div class=\"line\"></div><div class=\"line\">            TServerSocket serverTransport = <span class=\"keyword\">new</span> TServerSocket(SERVER_PORT);</div><div class=\"line\">            TServer.Args tArgs = <span class=\"keyword\">new</span> TServer.Args(serverTransport);</div><div class=\"line\">            tArgs.processor(tprocessor);</div><div class=\"line\">            tArgs.protocolFactory(<span class=\"keyword\">new</span> TBinaryProtocol.Factory());</div><div class=\"line\">            TServer server = <span class=\"keyword\">new</span> TSimpleServer(tArgs);</div><div class=\"line\">            server.serve();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Server start error!!!\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Server server = <span class=\"keyword\">new</span> Server();</div><div class=\"line\">        server.startServer();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client-java\"><a href=\"#Client-java\" class=\"headerlink\" title=\"Client(java)\"></a>Client(java)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.kris.thrift.demo.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TTransport;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TTransportException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TFramedTransport;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Inet4Address;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.NetworkInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.SocketException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERVER_PORT = <span class=\"number\">9001</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TIMEOUT = <span class=\"number\">30000</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TTransport transport = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DemoService.Client client;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            transport = <span class=\"keyword\">new</span> TSocket(getLocalIp(), SERVER_PORT, TIMEOUT);</div><div class=\"line\"></div><div class=\"line\">            transport.open();</div><div class=\"line\"></div><div class=\"line\">            TProtocol protocol = <span class=\"keyword\">new</span> TBinaryProtocol(transport);</div><div class=\"line\"></div><div class=\"line\">            client = <span class=\"keyword\">new</span> DemoService.Client(protocol);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">destroyClient</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != transport)</div><div class=\"line\">            transport.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getLocalIp</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        String ipAddress = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Enumeration&lt;NetworkInterface&gt; net = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            net = NetworkInterface.getNetworkInterfaces();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(net.hasMoreElements())&#123;</div><div class=\"line\">            NetworkInterface element = net.nextElement();</div><div class=\"line\">            Enumeration&lt;InetAddress&gt; addresses = element.getInetAddresses();</div><div class=\"line\">            <span class=\"keyword\">while</span> (addresses.hasMoreElements())&#123;</div><div class=\"line\">                InetAddress ip = addresses.nextElement();</div><div class=\"line\">                <span class=\"keyword\">if</span> (ip <span class=\"keyword\">instanceof</span> Inet4Address)&#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (ip.isSiteLocalAddress())&#123;</div><div class=\"line\"></div><div class=\"line\">                        ipAddress = ip.getHostAddress();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ipAddress;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代码下载地址\"><a href=\"#代码下载地址\" class=\"headerlink\" title=\"代码下载地址\"></a>代码下载地址</h4><p><a href=\"/uploads/thrift例子.zip\">Demo</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在所有的内容开始之前，我们来使用一下，最原始的Thrift用法。并且附上源码～</p>","more":"<h4 id=\"Thrift文件-idl\"><a href=\"#Thrift文件-idl\" class=\"headerlink\" title=\"Thrift文件(idl)\"></a>Thrift文件(idl)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">namespace java com.kris.thrift.demo.service</div><div class=\"line\"></div><div class=\"line\">service DemoService &#123;</div><div class=\"line\">    <span class=\"comment\">//hello world</span></div><div class=\"line\">    <span class=\"function\">string <span class=\"title\">helloWorld</span><span class=\"params\">(<span class=\"number\">1</span>:string name)</span></span></div><div class=\"line\"><span class=\"function\"></span></div><div class=\"line\"><span class=\"function\">&#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"Server端-java\"><a href=\"#Server端-java\" class=\"headerlink\" title=\"Server端(java)\"></a>Server端(java)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.kris.thrift.demo.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TProcessor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.server.TServer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.server.TSimpleServer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TServerSocket;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERVER_PORT = <span class=\"number\">9001</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startServer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"TSimpleServer start ....\"</span>);</div><div class=\"line\"></div><div class=\"line\">            TProcessor tprocessor = <span class=\"keyword\">new</span> DemoService.Processor&lt;DemoService.Iface&gt;(</div><div class=\"line\">                    <span class=\"keyword\">new</span> DemoServiceImpl());</div><div class=\"line\"></div><div class=\"line\">            TServerSocket serverTransport = <span class=\"keyword\">new</span> TServerSocket(SERVER_PORT);</div><div class=\"line\">            TServer.Args tArgs = <span class=\"keyword\">new</span> TServer.Args(serverTransport);</div><div class=\"line\">            tArgs.processor(tprocessor);</div><div class=\"line\">            tArgs.protocolFactory(<span class=\"keyword\">new</span> TBinaryProtocol.Factory());</div><div class=\"line\">            TServer server = <span class=\"keyword\">new</span> TSimpleServer(tArgs);</div><div class=\"line\">            server.serve();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Server start error!!!\"</span>);</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Server server = <span class=\"keyword\">new</span> Server();</div><div class=\"line\">        server.startServer();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Client-java\"><a href=\"#Client-java\" class=\"headerlink\" title=\"Client(java)\"></a>Client(java)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.kris.thrift.demo.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.TException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TBinaryProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.protocol.TProtocol;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TSocket;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TTransport;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TTransportException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.thrift.transport.TFramedTransport;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.net.Inet4Address;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.NetworkInterface;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.SocketException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SERVER_PORT = <span class=\"number\">9001</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TIMEOUT = <span class=\"number\">30000</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TTransport transport = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DemoService.Client client;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            transport = <span class=\"keyword\">new</span> TSocket(getLocalIp(), SERVER_PORT, TIMEOUT);</div><div class=\"line\"></div><div class=\"line\">            transport.open();</div><div class=\"line\"></div><div class=\"line\">            TProtocol protocol = <span class=\"keyword\">new</span> TBinaryProtocol(transport);</div><div class=\"line\"></div><div class=\"line\">            client = <span class=\"keyword\">new</span> DemoService.Client(protocol);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span>(Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">destroyClient</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != transport)</div><div class=\"line\">            transport.close();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getLocalIp</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        String ipAddress = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Enumeration&lt;NetworkInterface&gt; net = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            net = NetworkInterface.getNetworkInterfaces();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SocketException e) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span>(net.hasMoreElements())&#123;</div><div class=\"line\">            NetworkInterface element = net.nextElement();</div><div class=\"line\">            Enumeration&lt;InetAddress&gt; addresses = element.getInetAddresses();</div><div class=\"line\">            <span class=\"keyword\">while</span> (addresses.hasMoreElements())&#123;</div><div class=\"line\">                InetAddress ip = addresses.nextElement();</div><div class=\"line\">                <span class=\"keyword\">if</span> (ip <span class=\"keyword\">instanceof</span> Inet4Address)&#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (ip.isSiteLocalAddress())&#123;</div><div class=\"line\"></div><div class=\"line\">                        ipAddress = ip.getHostAddress();</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> ipAddress;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"代码下载地址\"><a href=\"#代码下载地址\" class=\"headerlink\" title=\"代码下载地址\"></a>代码下载地址</h4><p><a href=\"/uploads/thrift例子.zip\">Demo</a></p>"},{"title":"Thrift源码分析--概述","date":"2017-08-13T16:21:39.000Z","_content":"\n#### 简介  \n我司采用的RPC框架是apache开源的thrift，并在上层封装了服务注册和自动分配的功能，我将在两个部分分别介绍我司的RPC框架，首先是从底层进行分析整个的工作原理，下一步完成给thrift添加上下文，最终介绍我司的封装\n\n<!--more-->    \n\nThrift源于Facebook, 目前已经作为开源项目提交给了Apahce。Thrift解决了Facebook各系统的大数据量传输通信和内部不同语言环境的跨平台调用。   \n\n#### 官网  \nThrift的官方网站: http://thrift.apache.org/  \n\n#### 特点  \n作为一个高性能的RPC框架，Thrift的主要特点有\n1. 基于二进制的高性能的编解码框架\n2. 基于NIO的底层通信\n3. 相对简单的服务调用模型\n4. 使用IDL支持跨平台调用  \n\n#### 核心组件\n__Thrift其中包含了如下的几个核心组件：__\n\n- **TProtocol:** 协议和编解码组件  \n- **TTransport:** 传输组件  \n- **TProcessor:** 服务调用组件  \n- **TServer，Client:** 服务器和客户端组件  \n- **IDL:** 服务描述组件，负责生产跨平台客户端\n\n我会在后面的文章中依次介绍每一个组件  \n\n#### 建议\n在学习本系列文章之前，建议具备的知识点：\n - socket网络编程\n - NIO基础知识，以及nio、socket实现机制\n","source":"_posts/Thrift源码分析-概述.md","raw":"---\ntitle: Thrift源码分析--概述\ntags:\n  - RPC\n  - 原理\n  - 源码\n  - Thrift\ndate: 2017-08-14 00:21:39\n---\n\n#### 简介  \n我司采用的RPC框架是apache开源的thrift，并在上层封装了服务注册和自动分配的功能，我将在两个部分分别介绍我司的RPC框架，首先是从底层进行分析整个的工作原理，下一步完成给thrift添加上下文，最终介绍我司的封装\n\n<!--more-->    \n\nThrift源于Facebook, 目前已经作为开源项目提交给了Apahce。Thrift解决了Facebook各系统的大数据量传输通信和内部不同语言环境的跨平台调用。   \n\n#### 官网  \nThrift的官方网站: http://thrift.apache.org/  \n\n#### 特点  \n作为一个高性能的RPC框架，Thrift的主要特点有\n1. 基于二进制的高性能的编解码框架\n2. 基于NIO的底层通信\n3. 相对简单的服务调用模型\n4. 使用IDL支持跨平台调用  \n\n#### 核心组件\n__Thrift其中包含了如下的几个核心组件：__\n\n- **TProtocol:** 协议和编解码组件  \n- **TTransport:** 传输组件  \n- **TProcessor:** 服务调用组件  \n- **TServer，Client:** 服务器和客户端组件  \n- **IDL:** 服务描述组件，负责生产跨平台客户端\n\n我会在后面的文章中依次介绍每一个组件  \n\n#### 建议\n在学习本系列文章之前，建议具备的知识点：\n - socket网络编程\n - NIO基础知识，以及nio、socket实现机制\n","slug":"Thrift源码分析-概述","published":1,"updated":"2018-01-29T13:34:23.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5go000biifyo4365a7c","content":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>我司采用的RPC框架是apache开源的thrift，并在上层封装了服务注册和自动分配的功能，我将在两个部分分别介绍我司的RPC框架，首先是从底层进行分析整个的工作原理，下一步完成给thrift添加上下文，最终介绍我司的封装</p>\n<a id=\"more\"></a>    \n<p>Thrift源于Facebook, 目前已经作为开源项目提交给了Apahce。Thrift解决了Facebook各系统的大数据量传输通信和内部不同语言环境的跨平台调用。   </p>\n<h4 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h4><p>Thrift的官方网站: <a href=\"http://thrift.apache.org/\" target=\"_blank\" rel=\"external\">http://thrift.apache.org/</a>  </p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>作为一个高性能的RPC框架，Thrift的主要特点有</p>\n<ol>\n<li>基于二进制的高性能的编解码框架</li>\n<li>基于NIO的底层通信</li>\n<li>相对简单的服务调用模型</li>\n<li>使用IDL支持跨平台调用  </li>\n</ol>\n<h4 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h4><p><strong>Thrift其中包含了如下的几个核心组件：</strong></p>\n<ul>\n<li><strong>TProtocol:</strong> 协议和编解码组件  </li>\n<li><strong>TTransport:</strong> 传输组件  </li>\n<li><strong>TProcessor:</strong> 服务调用组件  </li>\n<li><strong>TServer，Client:</strong> 服务器和客户端组件  </li>\n<li><strong>IDL:</strong> 服务描述组件，负责生产跨平台客户端</li>\n</ul>\n<p>我会在后面的文章中依次介绍每一个组件  </p>\n<h4 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h4><p>在学习本系列文章之前，建议具备的知识点：</p>\n<ul>\n<li>socket网络编程</li>\n<li>NIO基础知识，以及nio、socket实现机制</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>我司采用的RPC框架是apache开源的thrift，并在上层封装了服务注册和自动分配的功能，我将在两个部分分别介绍我司的RPC框架，首先是从底层进行分析整个的工作原理，下一步完成给thrift添加上下文，最终介绍我司的封装</p>","more":"<p>Thrift源于Facebook, 目前已经作为开源项目提交给了Apahce。Thrift解决了Facebook各系统的大数据量传输通信和内部不同语言环境的跨平台调用。   </p>\n<h4 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h4><p>Thrift的官方网站: <a href=\"http://thrift.apache.org/\" target=\"_blank\" rel=\"external\">http://thrift.apache.org/</a>  </p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>作为一个高性能的RPC框架，Thrift的主要特点有</p>\n<ol>\n<li>基于二进制的高性能的编解码框架</li>\n<li>基于NIO的底层通信</li>\n<li>相对简单的服务调用模型</li>\n<li>使用IDL支持跨平台调用  </li>\n</ol>\n<h4 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h4><p><strong>Thrift其中包含了如下的几个核心组件：</strong></p>\n<ul>\n<li><strong>TProtocol:</strong> 协议和编解码组件  </li>\n<li><strong>TTransport:</strong> 传输组件  </li>\n<li><strong>TProcessor:</strong> 服务调用组件  </li>\n<li><strong>TServer，Client:</strong> 服务器和客户端组件  </li>\n<li><strong>IDL:</strong> 服务描述组件，负责生产跨平台客户端</li>\n</ul>\n<p>我会在后面的文章中依次介绍每一个组件  </p>\n<h4 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h4><p>在学习本系列文章之前，建议具备的知识点：</p>\n<ul>\n<li>socket网络编程</li>\n<li>NIO基础知识，以及nio、socket实现机制</li>\n</ul>"},{"title":"Thrift源码分析--请求流程图","date":"2017-08-19T16:00:50.000Z","_content":"## 简介    \n\n本章我会整体梳理下一个请求的流程图，建议先看下原生的调用例子，了解thrift的基本使用以后。再来看本章，里面会涉及到很多方法，都会在后文中一一介绍。\n\n<!--more-->  \n\n### thrift调用流程图  \n![流程图](/images/流程图.jpeg \"thrift调用整体流程图\")  \n\n\n##### 图片介绍\n左边是CLIENT，右面是SERVER\n整体使用的是原生调用例子中的代码。可以追着里面的源码，参照本图进行综合分析\n","source":"_posts/Thrift源码分析-请求流程图.md","raw":"---\ntitle: Thrift源码分析--请求流程图\ntags:\n  - RPC\n  - 原理\n  - 源码\n  - Thrift\ndate: 2017-08-20 00:00:50\n---\n## 简介    \n\n本章我会整体梳理下一个请求的流程图，建议先看下原生的调用例子，了解thrift的基本使用以后。再来看本章，里面会涉及到很多方法，都会在后文中一一介绍。\n\n<!--more-->  \n\n### thrift调用流程图  \n![流程图](/images/流程图.jpeg \"thrift调用整体流程图\")  \n\n\n##### 图片介绍\n左边是CLIENT，右面是SERVER\n整体使用的是原生调用例子中的代码。可以追着里面的源码，参照本图进行综合分析\n","slug":"Thrift源码分析-请求流程图","published":1,"updated":"2018-01-30T16:53:42.977Z","_id":"cjd1vi5gp000ciifyrdcos0o8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本章我会整体梳理下一个请求的流程图，建议先看下原生的调用例子，了解thrift的基本使用以后。再来看本章，里面会涉及到很多方法，都会在后文中一一介绍。</p>\n<a id=\"more\"></a>  \n<h3 id=\"thrift调用流程图\"><a href=\"#thrift调用流程图\" class=\"headerlink\" title=\"thrift调用流程图\"></a>thrift调用流程图</h3><p><img src=\"/images/流程图.jpeg\" alt=\"流程图\" title=\"thrift调用整体流程图\">  </p>\n<h5 id=\"图片介绍\"><a href=\"#图片介绍\" class=\"headerlink\" title=\"图片介绍\"></a>图片介绍</h5><p>左边是CLIENT，右面是SERVER<br>整体使用的是原生调用例子中的代码。可以追着里面的源码，参照本图进行综合分析</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>本章我会整体梳理下一个请求的流程图，建议先看下原生的调用例子，了解thrift的基本使用以后。再来看本章，里面会涉及到很多方法，都会在后文中一一介绍。</p>","more":"<h3 id=\"thrift调用流程图\"><a href=\"#thrift调用流程图\" class=\"headerlink\" title=\"thrift调用流程图\"></a>thrift调用流程图</h3><p><img src=\"/images/流程图.jpeg\" alt=\"流程图\" title=\"thrift调用整体流程图\">  </p>\n<h5 id=\"图片介绍\"><a href=\"#图片介绍\" class=\"headerlink\" title=\"图片介绍\"></a>图片介绍</h5><p>左边是CLIENT，右面是SERVER<br>整体使用的是原生调用例子中的代码。可以追着里面的源码，参照本图进行综合分析</p>"},{"title":"Thrift源码分析--扩展方案","_content":"","source":"_drafts/Thrift源码分析-扩展方案.md","raw":"---\ntitle: Thrift源码分析--扩展方案\ntags:\n---\n","slug":"Thrift源码分析-扩展方案","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gs000eiifyvishy0sl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Thrift源码分析--方法调用链","_content":"","source":"_drafts/Thrift源码分析-方法调用链.md","raw":"---\ntitle: Thrift源码分析--方法调用链\ntags:\n---\n","slug":"Thrift源码分析-方法调用链","published":0,"date":"2017-08-17T16:25:21.000Z","updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gu000fiify6ulf6mcx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"ClassLoader分析","date":"2017-08-13T14:43:32.000Z","_content":"## ClassLoader的分类\n整体上一共有三种，也是classloader的加载顺序\n- bootstrap classLoader  --这个是JVM级别的\n- extension classLoader  --这个是扩展加载器\n- system classLoader  --应用类加载器\n\n<!--more-->\n\n下面依次介绍这三个ClassLoader.\n#### Bootstrap classLoader\n首先来说，这个加载器的被调用时机\n","source":"_posts/ClassLoader分析.md","raw":"---\ntitle: ClassLoader分析\ndate: 2017-08-13 22:43:32\ntags:\n  - Java\n  - 原理\n---\n## ClassLoader的分类\n整体上一共有三种，也是classloader的加载顺序\n- bootstrap classLoader  --这个是JVM级别的\n- extension classLoader  --这个是扩展加载器\n- system classLoader  --应用类加载器\n\n<!--more-->\n\n下面依次介绍这三个ClassLoader.\n#### Bootstrap classLoader\n首先来说，这个加载器的被调用时机\n","slug":"ClassLoader分析","published":1,"updated":"2017-08-17T16:25:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjd1vi5gw000hiifyfrcuy1n8","content":"<h2 id=\"ClassLoader的分类\"><a href=\"#ClassLoader的分类\" class=\"headerlink\" title=\"ClassLoader的分类\"></a>ClassLoader的分类</h2><p>整体上一共有三种，也是classloader的加载顺序</p>\n<ul>\n<li>bootstrap classLoader  –这个是JVM级别的</li>\n<li>extension classLoader  –这个是扩展加载器</li>\n<li>system classLoader  –应用类加载器</li>\n</ul>\n<a id=\"more\"></a>\n<p>下面依次介绍这三个ClassLoader.</p>\n<h4 id=\"Bootstrap-classLoader\"><a href=\"#Bootstrap-classLoader\" class=\"headerlink\" title=\"Bootstrap classLoader\"></a>Bootstrap classLoader</h4><p>首先来说，这个加载器的被调用时机</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"ClassLoader的分类\"><a href=\"#ClassLoader的分类\" class=\"headerlink\" title=\"ClassLoader的分类\"></a>ClassLoader的分类</h2><p>整体上一共有三种，也是classloader的加载顺序</p>\n<ul>\n<li>bootstrap classLoader  –这个是JVM级别的</li>\n<li>extension classLoader  –这个是扩展加载器</li>\n<li>system classLoader  –应用类加载器</li>\n</ul>","more":"<p>下面依次介绍这三个ClassLoader.</p>\n<h4 id=\"Bootstrap-classLoader\"><a href=\"#Bootstrap-classLoader\" class=\"headerlink\" title=\"Bootstrap classLoader\"></a>Bootstrap classLoader</h4><p>首先来说，这个加载器的被调用时机</p>"},{"title":"人生第一次写博客","date":"2017-08-10T08:05:52.000Z","comments":1,"_content":"``` java\nSystem.out.println(\"hello world\");\n```\n### READ More\n\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n\n开始一步一步向工程师进攻～\n\n<!--more-->\n\n哈哈\n","source":"_posts/first-page.md","raw":"---\ntitle: 人生第一次写博客\ndate: 2017-08-10 16:05:52\ntags:\n    - 测试\n    - 哈哈\ncomments: true\n---\n``` java\nSystem.out.println(\"hello world\");\n```\n### READ More\n\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n\n\n开始一步一步向工程师进攻～\n\n<!--more-->\n\n哈哈\n","slug":"first-page","published":1,"updated":"2017-08-10T15:39:36.000Z","layout":"post","photos":[],"link":"","_id":"cjd1vi5gx000iiify6zutv5el","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"READ-More\"><a href=\"#READ-More\" class=\"headerlink\" title=\"READ More\"></a>READ More</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<p>开始一步一步向工程师进攻～</p>\n<a id=\"more\"></a>\n<p>哈哈</p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">System.out.println(<span class=\"string\">\"hello world\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"READ-More\"><a href=\"#READ-More\" class=\"headerlink\" title=\"READ More\"></a>READ More</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>\n<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>\n<p>开始一步一步向工程师进攻～</p>","more":"<p>哈哈</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjd1vi5gg0007iify5mmt73c6","tag_id":"cjd1vi5gl0009iifyia6qgf7e","_id":"cjd1vi5gz000liifyki1rilnq"},{"post_id":"cjd1vi5gg0007iify5mmt73c6","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h0000miifyh6649wx0"},{"post_id":"cjd1vi5gg0007iify5mmt73c6","tag_id":"cjd1vi5gv000giify0vyjkyz7","_id":"cjd1vi5h0000oiifyoxgjddvp"},{"post_id":"cjd1vi5gg0007iify5mmt73c6","tag_id":"cjd1vi5gy000jiify85xb8o8e","_id":"cjd1vi5h0000piifylrcjxm7d"},{"post_id":"cjd1vi5gk0008iifyby9gqin0","tag_id":"cjd1vi5gl0009iifyia6qgf7e","_id":"cjd1vi5h1000tiifymp976rtp"},{"post_id":"cjd1vi5gk0008iifyby9gqin0","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h1000uiify77dvwm2y"},{"post_id":"cjd1vi5gk0008iifyby9gqin0","tag_id":"cjd1vi5gv000giify0vyjkyz7","_id":"cjd1vi5h2000wiifyvzdbvosx"},{"post_id":"cjd1vi5gk0008iifyby9gqin0","tag_id":"cjd1vi5gy000jiify85xb8o8e","_id":"cjd1vi5h2000xiifyrwh3wvgl"},{"post_id":"cjd1vi5gn000aiifydf9rpv7s","tag_id":"cjd1vi5gl0009iifyia6qgf7e","_id":"cjd1vi5h30011iifydr9u0ndr"},{"post_id":"cjd1vi5gn000aiifydf9rpv7s","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h30012iifydjzbrlmf"},{"post_id":"cjd1vi5gn000aiifydf9rpv7s","tag_id":"cjd1vi5gv000giify0vyjkyz7","_id":"cjd1vi5h30014iifydct43kne"},{"post_id":"cjd1vi5gn000aiifydf9rpv7s","tag_id":"cjd1vi5gy000jiify85xb8o8e","_id":"cjd1vi5h30015iifyzhnw2htj"},{"post_id":"cjd1vi5go000biifyo4365a7c","tag_id":"cjd1vi5gl0009iifyia6qgf7e","_id":"cjd1vi5h40018iifyb1b0ilp3"},{"post_id":"cjd1vi5go000biifyo4365a7c","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h40019iifyqf5orgv2"},{"post_id":"cjd1vi5go000biifyo4365a7c","tag_id":"cjd1vi5gv000giify0vyjkyz7","_id":"cjd1vi5h5001biifyms53h52r"},{"post_id":"cjd1vi5go000biifyo4365a7c","tag_id":"cjd1vi5gy000jiify85xb8o8e","_id":"cjd1vi5h5001ciifyxjeak9rp"},{"post_id":"cjd1vi5gp000ciifyrdcos0o8","tag_id":"cjd1vi5gl0009iifyia6qgf7e","_id":"cjd1vi5h8001fiify6wygeog8"},{"post_id":"cjd1vi5gp000ciifyrdcos0o8","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h8001giify1qwt8i6h"},{"post_id":"cjd1vi5gp000ciifyrdcos0o8","tag_id":"cjd1vi5gv000giify0vyjkyz7","_id":"cjd1vi5h9001iiifye863rpnj"},{"post_id":"cjd1vi5gp000ciifyrdcos0o8","tag_id":"cjd1vi5gy000jiify85xb8o8e","_id":"cjd1vi5h9001jiify9ds5pjbw"},{"post_id":"cjd1vi5gw000hiifyfrcuy1n8","tag_id":"cjd1vi5h5001eiify3ay6rg7w","_id":"cjd1vi5h9001liifyf37gufwl"},{"post_id":"cjd1vi5gw000hiifyfrcuy1n8","tag_id":"cjd1vi5gr000diifyif1j29z6","_id":"cjd1vi5h9001miifyaj9yjqzf"},{"post_id":"cjd1vi5gx000iiify6zutv5el","tag_id":"cjd1vi5h8001hiify690cm8o2","_id":"cjd1vi5h9001niifyrs1jzv5i"},{"post_id":"cjd1vi5gx000iiify6zutv5el","tag_id":"cjd1vi5h9001kiify6cwreh9d","_id":"cjd1vi5h9001oiify4gl0vjiw"}],"Tag":[{"name":"RPC","_id":"cjd1vi5gl0009iifyia6qgf7e"},{"name":"原理","_id":"cjd1vi5gr000diifyif1j29z6"},{"name":"源码","_id":"cjd1vi5gv000giify0vyjkyz7"},{"name":"Thrift","_id":"cjd1vi5gy000jiify85xb8o8e"},{"name":"Java","_id":"cjd1vi5h5001eiify3ay6rg7w"},{"name":"测试","_id":"cjd1vi5h8001hiify690cm8o2"},{"name":"哈哈","_id":"cjd1vi5h9001kiify6cwreh9d"}]}}